//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: fund_mgr_rpc.proto

package fundmgr

import (
	metadata "git.code.oa.com/gongyi/donate_steps/api/metadata"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserMatchResponse_Result int32

const (
	UserMatchResponse_SUCCESS                UserMatchResponse_Result = 0
	UserMatchResponse_FAILED_MATCH_END       UserMatchResponse_Result = 1
	UserMatchResponse_FAILED_STEP_NOT_ENOUGH UserMatchResponse_Result = 2
	UserMatchResponse_FAILED_ALREADY_MATCH   UserMatchResponse_Result = 3
)

// Enum value maps for UserMatchResponse_Result.
var (
	UserMatchResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILED_MATCH_END",
		2: "FAILED_STEP_NOT_ENOUGH",
		3: "FAILED_ALREADY_MATCH",
	}
	UserMatchResponse_Result_value = map[string]int32{
		"SUCCESS":                0,
		"FAILED_MATCH_END":       1,
		"FAILED_STEP_NOT_ENOUGH": 2,
		"FAILED_ALREADY_MATCH":   3,
	}
)

func (x UserMatchResponse_Result) Enum() *UserMatchResponse_Result {
	p := new(UserMatchResponse_Result)
	*p = x
	return p
}

func (x UserMatchResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserMatchResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_fund_mgr_rpc_proto_enumTypes[0].Descriptor()
}

func (UserMatchResponse_Result) Type() protoreflect.EnumType {
	return &file_fund_mgr_rpc_proto_enumTypes[0]
}

func (x UserMatchResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserMatchResponse_Result.Descriptor instead.
func (UserMatchResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_fund_mgr_rpc_proto_rawDescGZIP(), []int{9, 0}
}

type CreateMatchEventResponse_Status int32

const (
	CreateMatchEventResponse_SUCCESS        CreateMatchEventResponse_Status = 0
	CreateMatchEventResponse_INTERNAL_ERROR CreateMatchEventResponse_Status = 1
)

// Enum value maps for CreateMatchEventResponse_Status.
var (
	CreateMatchEventResponse_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "INTERNAL_ERROR",
	}
	CreateMatchEventResponse_Status_value = map[string]int32{
		"SUCCESS":        0,
		"INTERNAL_ERROR": 1,
	}
)

func (x CreateMatchEventResponse_Status) Enum() *CreateMatchEventResponse_Status {
	p := new(CreateMatchEventResponse_Status)
	*p = x
	return p
}

func (x CreateMatchEventResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateMatchEventResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_fund_mgr_rpc_proto_enumTypes[1].Descriptor()
}

func (CreateMatchEventResponse_Status) Type() protoreflect.EnumType {
	return &file_fund_mgr_rpc_proto_enumTypes[1]
}

func (x CreateMatchEventResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateMatchEventResponse_Status.Descriptor instead.
func (CreateMatchEventResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_fund_mgr_rpc_proto_rawDescGZIP(), []int{11, 0}
}

type GetMatchEventResponse_Status int32

const (
	GetMatchEventResponse_SUCCESS        GetMatchEventResponse_Status = 0
	GetMatchEventResponse_INTERNAL_ERROR GetMatchEventResponse_Status = 1
)

// Enum value maps for GetMatchEventResponse_Status.
var (
	GetMatchEventResponse_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "INTERNAL_ERROR",
	}
	GetMatchEventResponse_Status_value = map[string]int32{
		"SUCCESS":        0,
		"INTERNAL_ERROR": 1,
	}
)

func (x GetMatchEventResponse_Status) Enum() *GetMatchEventResponse_Status {
	p := new(GetMatchEventResponse_Status)
	*p = x
	return p
}

func (x GetMatchEventResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMatchEventResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_fund_mgr_rpc_proto_enumTypes[2].Descriptor()
}

func (GetMatchEventResponse_Status) Type() protoreflect.EnumType {
	return &file_fund_mgr_rpc_proto_enumTypes[2]
}

func (x GetMatchEventResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMatchEventResponse_Status.Descriptor instead.
func (GetMatchEventResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_fund_mgr_rpc_proto_rawDescGZIP(), []int{13, 0}
}

type GetUserWeekMatchRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid        string `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Start      string `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End        string `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	ActivityId string `protobuf:"bytes,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *GetUserWeekMatchRecordRequest) Reset() {
	*x = GetUserWeekMatchRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fund_mgr_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserWeekMatchRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserWeekMatchRecordRequest) ProtoMessage() {}

func (x *GetUserWeekMatchRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fund_mgr_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserWeekMatchRecordRequest.ProtoReflect.Descriptor instead.
func (*GetUserWeekMatchRecordRequest) Descriptor() ([]byte, []int) {
	return file_fund_mgr_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *GetUserWeekMatchRecordRequest) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *GetUserWeekMatchRecordRequest) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *GetUserWeekMatchRecordRequest) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *GetUserWeekMatchRecordRequest) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

type GetUserWeekMatchRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *metadata.CommonHeader             `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Records      []*metadata.MatchRecord            `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`
	ActivityInfo map[string]*metadata.MatchActivity `protobuf:"bytes,3,rep,name=activity_info,json=activityInfo,proto3" json:"activity_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetUserWeekMatchRecordResponse) Reset() {
	*x = GetUserWeekMatchRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fund_mgr_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserWeekMatchRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserWeekMatchRecordResponse) ProtoMessage() {}

func (x *GetUserWeekMatchRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fund_mgr_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserWeekMatchRecordResponse.ProtoReflect.Descriptor instead.
func (*GetUserWeekMatchRecordResponse) Descriptor() ([]byte, []int) {
	return file_fund_mgr_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *GetUserWeekMatchRecordResponse) GetHeader() *metadata.CommonHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetUserWeekMatchRecordResponse) GetRecords() []*metadata.MatchRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *GetUserWeekMatchRecordResponse) GetActivityInfo() map[string]*metadata.MatchActivity {
	if x != nil {
		return x.ActivityInfo
	}
	return nil
}

type GetUserMatchRecordByOffsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid        string `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Offset     int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Size       int32  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	ActivityId string `protobuf:"bytes,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *GetUserMatchRecordByOffsetRequest) Reset() {
	*x = GetUserMatchRecordByOffsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fund_mgr_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserMatchRecordByOffsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserMatchRecordByOffsetRequest) ProtoMessage() {}

func (x *GetUserMatchRecordByOffsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fund_mgr_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserMatchRecordByOffsetRequest.ProtoReflect.Descriptor instead.
func (*GetUserMatchRecordByOffsetRequest) Descriptor() ([]byte, []int) {
	return file_fund_mgr_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *GetUserMatchRecordByOffsetRequest) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *GetUserMatchRecordByOffsetRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetUserMatchRecordByOffsetRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetUserMatchRecordByOffsetRequest) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

type GetUserMatchRecordByOffsetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *metadata.CommonHeader             `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	TotalFunds   int32                              `protobuf:"varint,2,opt,name=total_funds,json=totalFunds,proto3" json:"total_funds,omitempty"`
	TotalSteps   int32                              `protobuf:"varint,3,opt,name=total_steps,json=totalSteps,proto3" json:"total_steps,omitempty"`
	TotalTimes   int32                              `protobuf:"varint,4,opt,name=total_times,json=totalTimes,proto3" json:"total_times,omitempty"`
	Records      []*metadata.MatchRecord            `protobuf:"bytes,5,rep,name=records,proto3" json:"records,omitempty"`
	ActivityInfo map[string]*metadata.MatchActivity `protobuf:"bytes,6,rep,name=activity_info,json=activityInfo,proto3" json:"activity_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UserActivity map[string]*metadata.Activity      `protobuf:"bytes,7,rep,name=user_activity,json=userActivity,proto3" json:"user_activity,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetUserMatchRecordByOffsetResponse) Reset() {
	*x = GetUserMatchRecordByOffsetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fund_mgr_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserMatchRecordByOffsetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserMatchRecordByOffsetResponse) ProtoMessage() {}

func (x *GetUserMatchRecordByOffsetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fund_mgr_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserMatchRecordByOffsetResponse.ProtoReflect.Descriptor instead.
func (*GetUserMatchRecordByOffsetResponse) Descriptor() ([]byte, []int) {
	return file_fund_mgr_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *GetUserMatchRecordByOffsetResponse) GetHeader() *metadata.CommonHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetUserMatchRecordByOffsetResponse) GetTotalFunds() int32 {
	if x != nil {
		return x.TotalFunds
	}
	return 0
}

func (x *GetUserMatchRecordByOffsetResponse) GetTotalSteps() int32 {
	if x != nil {
		return x.TotalSteps
	}
	return 0
}

func (x *GetUserMatchRecordByOffsetResponse) GetTotalTimes() int32 {
	if x != nil {
		return x.TotalTimes
	}
	return 0
}

func (x *GetUserMatchRecordByOffsetResponse) GetRecords() []*metadata.MatchRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *GetUserMatchRecordByOffsetResponse) GetActivityInfo() map[string]*metadata.MatchActivity {
	if x != nil {
		return x.ActivityInfo
	}
	return nil
}

func (x *GetUserMatchRecordByOffsetResponse) GetUserActivity() map[string]*metadata.Activity {
	if x != nil {
		return x.UserActivity
	}
	return nil
}

type GetUserTodayMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid        string `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	ActivityId string `protobuf:"bytes,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *GetUserTodayMatchRequest) Reset() {
	*x = GetUserTodayMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fund_mgr_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserTodayMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTodayMatchRequest) ProtoMessage() {}

func (x *GetUserTodayMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fund_mgr_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTodayMatchRequest.ProtoReflect.Descriptor instead.
func (*GetUserTodayMatchRequest) Descriptor() ([]byte, []int) {
	return file_fund_mgr_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *GetUserTodayMatchRequest) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *GetUserTodayMatchRequest) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

type GetUserTodayMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *metadata.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// user data
	MatchFlag bool                  `protobuf:"varint,2,opt,name=match_flag,json=matchFlag,proto3" json:"match_flag,omitempty"` // user match today or not
	Records   *metadata.MatchRecord `protobuf:"bytes,3,opt,name=records,proto3" json:"records,omitempty"`
	Combos    int32                 `protobuf:"varint,7,opt,name=combos,proto3" json:"combos,omitempty"` // user match combo
	// activity data
	ActivityInfo *metadata.MatchActivity `protobuf:"bytes,10,opt,name=activity_info,json=activityInfo,proto3" json:"activity_info,omitempty"`
}

func (x *GetUserTodayMatchResponse) Reset() {
	*x = GetUserTodayMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fund_mgr_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserTodayMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTodayMatchResponse) ProtoMessage() {}

func (x *GetUserTodayMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fund_mgr_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTodayMatchResponse.ProtoReflect.Descriptor instead.
func (*GetUserTodayMatchResponse) Descriptor() ([]byte, []int) {
	return file_fund_mgr_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *GetUserTodayMatchResponse) GetHeader() *metadata.CommonHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetUserTodayMatchResponse) GetMatchFlag() bool {
	if x != nil {
		return x.MatchFlag
	}
	return false
}

func (x *GetUserTodayMatchResponse) GetRecords() *metadata.MatchRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *GetUserTodayMatchResponse) GetCombos() int32 {
	if x != nil {
		return x.Combos
	}
	return 0
}

func (x *GetUserTodayMatchResponse) GetActivityInfo() *metadata.MatchActivity {
	if x != nil {
		return x.ActivityInfo
	}
	return nil
}

type GetUserMatchDonateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid        string `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	ActivityId string `protobuf:"bytes,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *GetUserMatchDonateRequest) Reset() {
	*x = GetUserMatchDonateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fund_mgr_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserMatchDonateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserMatchDonateRequest) ProtoMessage() {}

func (x *GetUserMatchDonateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fund_mgr_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserMatchDonateRequest.ProtoReflect.Descriptor instead.
func (*GetUserMatchDonateRequest) Descriptor() ([]byte, []int) {
	return file_fund_mgr_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *GetUserMatchDonateRequest) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *GetUserMatchDonateRequest) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

type GetUserMatchDonateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *metadata.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// user match data
	MatchStatus *metadata.MatchStatus `protobuf:"bytes,2,opt,name=match_status,json=matchStatus,proto3" json:"match_status,omitempty"`
	// activity data
	ActivityInfo *metadata.MatchActivity `protobuf:"bytes,3,opt,name=activity_info,json=activityInfo,proto3" json:"activity_info,omitempty"`
}

func (x *GetUserMatchDonateResponse) Reset() {
	*x = GetUserMatchDonateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fund_mgr_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserMatchDonateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserMatchDonateResponse) ProtoMessage() {}

func (x *GetUserMatchDonateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fund_mgr_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserMatchDonateResponse.ProtoReflect.Descriptor instead.
func (*GetUserMatchDonateResponse) Descriptor() ([]byte, []int) {
	return file_fund_mgr_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *GetUserMatchDonateResponse) GetHeader() *metadata.CommonHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetUserMatchDonateResponse) GetMatchStatus() *metadata.MatchStatus {
	if x != nil {
		return x.MatchStatus
	}
	return nil
}

func (x *GetUserMatchDonateResponse) GetActivityInfo() *metadata.MatchActivity {
	if x != nil {
		return x.ActivityInfo
	}
	return nil
}

type UserMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid        string `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Steps      int32  `protobuf:"varint,2,opt,name=steps,proto3" json:"steps,omitempty"`
	ActivityId string `protobuf:"bytes,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *UserMatchRequest) Reset() {
	*x = UserMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fund_mgr_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMatchRequest) ProtoMessage() {}

func (x *UserMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fund_mgr_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMatchRequest.ProtoReflect.Descriptor instead.
func (*UserMatchRequest) Descriptor() ([]byte, []int) {
	return file_fund_mgr_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *UserMatchRequest) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *UserMatchRequest) GetSteps() int32 {
	if x != nil {
		return x.Steps
	}
	return 0
}

func (x *UserMatchRequest) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

type UserMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *metadata.CommonHeader   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result  UserMatchResponse_Result `protobuf:"varint,2,opt,name=result,proto3,enum=fundmgr.UserMatchResponse_Result" json:"result,omitempty"`
	Records *metadata.MatchRecord    `protobuf:"bytes,3,opt,name=records,proto3" json:"records,omitempty"`
}

func (x *UserMatchResponse) Reset() {
	*x = UserMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fund_mgr_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMatchResponse) ProtoMessage() {}

func (x *UserMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fund_mgr_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMatchResponse.ProtoReflect.Descriptor instead.
func (*UserMatchResponse) Descriptor() ([]byte, []int) {
	return file_fund_mgr_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *UserMatchResponse) GetHeader() *metadata.CommonHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UserMatchResponse) GetResult() UserMatchResponse_Result {
	if x != nil {
		return x.Result
	}
	return UserMatchResponse_SUCCESS
}

func (x *UserMatchResponse) GetRecords() *metadata.MatchRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type CreateMatchEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchInfo *metadata.MatchInfo `protobuf:"bytes,1,opt,name=match_info,json=matchInfo,proto3" json:"match_info,omitempty"`
	MatchRule *metadata.MatchRule `protobuf:"bytes,2,opt,name=match_rule,json=matchRule,proto3" json:"match_rule,omitempty"`
}

func (x *CreateMatchEventRequest) Reset() {
	*x = CreateMatchEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fund_mgr_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMatchEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMatchEventRequest) ProtoMessage() {}

func (x *CreateMatchEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fund_mgr_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMatchEventRequest.ProtoReflect.Descriptor instead.
func (*CreateMatchEventRequest) Descriptor() ([]byte, []int) {
	return file_fund_mgr_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *CreateMatchEventRequest) GetMatchInfo() *metadata.MatchInfo {
	if x != nil {
		return x.MatchInfo
	}
	return nil
}

func (x *CreateMatchEventRequest) GetMatchRule() *metadata.MatchRule {
	if x != nil {
		return x.MatchRule
	}
	return nil
}

type CreateMatchEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *metadata.CommonHeader          `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	MatchEvent *metadata.MatchActivity         `protobuf:"bytes,2,opt,name=match_event,json=matchEvent,proto3" json:"match_event,omitempty"`
	Status     CreateMatchEventResponse_Status `protobuf:"varint,3,opt,name=status,proto3,enum=fundmgr.CreateMatchEventResponse_Status" json:"status,omitempty"`
}

func (x *CreateMatchEventResponse) Reset() {
	*x = CreateMatchEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fund_mgr_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMatchEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMatchEventResponse) ProtoMessage() {}

func (x *CreateMatchEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fund_mgr_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMatchEventResponse.ProtoReflect.Descriptor instead.
func (*CreateMatchEventResponse) Descriptor() ([]byte, []int) {
	return file_fund_mgr_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *CreateMatchEventResponse) GetHeader() *metadata.CommonHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CreateMatchEventResponse) GetMatchEvent() *metadata.MatchActivity {
	if x != nil {
		return x.MatchEvent
	}
	return nil
}

func (x *CreateMatchEventResponse) GetStatus() CreateMatchEventResponse_Status {
	if x != nil {
		return x.Status
	}
	return CreateMatchEventResponse_SUCCESS
}

type GetMatchEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eid string `protobuf:"bytes,1,opt,name=eid,proto3" json:"eid,omitempty"`
}

func (x *GetMatchEventRequest) Reset() {
	*x = GetMatchEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fund_mgr_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchEventRequest) ProtoMessage() {}

func (x *GetMatchEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fund_mgr_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchEventRequest.ProtoReflect.Descriptor instead.
func (*GetMatchEventRequest) Descriptor() ([]byte, []int) {
	return file_fund_mgr_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *GetMatchEventRequest) GetEid() string {
	if x != nil {
		return x.Eid
	}
	return ""
}

type GetMatchEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *metadata.CommonHeader       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	MatchEvent *metadata.MatchActivity      `protobuf:"bytes,2,opt,name=match_event,json=matchEvent,proto3" json:"match_event,omitempty"`
	Status     GetMatchEventResponse_Status `protobuf:"varint,3,opt,name=status,proto3,enum=fundmgr.GetMatchEventResponse_Status" json:"status,omitempty"`
}

func (x *GetMatchEventResponse) Reset() {
	*x = GetMatchEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fund_mgr_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchEventResponse) ProtoMessage() {}

func (x *GetMatchEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fund_mgr_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchEventResponse.ProtoReflect.Descriptor instead.
func (*GetMatchEventResponse) Descriptor() ([]byte, []int) {
	return file_fund_mgr_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *GetMatchEventResponse) GetHeader() *metadata.CommonHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetMatchEventResponse) GetMatchEvent() *metadata.MatchActivity {
	if x != nil {
		return x.MatchEvent
	}
	return nil
}

func (x *GetMatchEventResponse) GetStatus() GetMatchEventResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetMatchEventResponse_SUCCESS
}

type GetActivityMatchRankRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId string `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Offset     int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Size       int32  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *GetActivityMatchRankRequest) Reset() {
	*x = GetActivityMatchRankRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fund_mgr_rpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityMatchRankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityMatchRankRequest) ProtoMessage() {}

func (x *GetActivityMatchRankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fund_mgr_rpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityMatchRankRequest.ProtoReflect.Descriptor instead.
func (*GetActivityMatchRankRequest) Descriptor() ([]byte, []int) {
	return file_fund_mgr_rpc_proto_rawDescGZIP(), []int{14}
}

func (x *GetActivityMatchRankRequest) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *GetActivityMatchRankRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetActivityMatchRankRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type GetActivityMatchRankResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header   *metadata.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserRank []*metadata.UserRank   `protobuf:"bytes,2,rep,name=user_rank,json=userRank,proto3" json:"user_rank,omitempty"`
}

func (x *GetActivityMatchRankResponse) Reset() {
	*x = GetActivityMatchRankResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fund_mgr_rpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityMatchRankResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityMatchRankResponse) ProtoMessage() {}

func (x *GetActivityMatchRankResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fund_mgr_rpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityMatchRankResponse.ProtoReflect.Descriptor instead.
func (*GetActivityMatchRankResponse) Descriptor() ([]byte, []int) {
	return file_fund_mgr_rpc_proto_rawDescGZIP(), []int{15}
}

func (x *GetActivityMatchRankResponse) GetHeader() *metadata.CommonHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetActivityMatchRankResponse) GetUserRank() []*metadata.UserRank {
	if x != nil {
		return x.UserRank
	}
	return nil
}

type GetActivityMatchInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId string `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"` // if activity is null, get yqz match
}

func (x *GetActivityMatchInfoRequest) Reset() {
	*x = GetActivityMatchInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fund_mgr_rpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityMatchInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityMatchInfoRequest) ProtoMessage() {}

func (x *GetActivityMatchInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fund_mgr_rpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityMatchInfoRequest.ProtoReflect.Descriptor instead.
func (*GetActivityMatchInfoRequest) Descriptor() ([]byte, []int) {
	return file_fund_mgr_rpc_proto_rawDescGZIP(), []int{16}
}

func (x *GetActivityMatchInfoRequest) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

type GetActivityMatchInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *metadata.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// activity data
	ActivityInfo *metadata.MatchActivity `protobuf:"bytes,2,opt,name=activity_info,json=activityInfo,proto3" json:"activity_info,omitempty"`
}

func (x *GetActivityMatchInfoResponse) Reset() {
	*x = GetActivityMatchInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fund_mgr_rpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityMatchInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityMatchInfoResponse) ProtoMessage() {}

func (x *GetActivityMatchInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fund_mgr_rpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityMatchInfoResponse.ProtoReflect.Descriptor instead.
func (*GetActivityMatchInfoResponse) Descriptor() ([]byte, []int) {
	return file_fund_mgr_rpc_proto_rawDescGZIP(), []int{17}
}

func (x *GetActivityMatchInfoResponse) GetHeader() *metadata.CommonHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetActivityMatchInfoResponse) GetActivityInfo() *metadata.MatchActivity {
	if x != nil {
		return x.ActivityInfo
	}
	return nil
}

type GetCompanyMatchRankRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Size   int32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *GetCompanyMatchRankRequest) Reset() {
	*x = GetCompanyMatchRankRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fund_mgr_rpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyMatchRankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyMatchRankRequest) ProtoMessage() {}

func (x *GetCompanyMatchRankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fund_mgr_rpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyMatchRankRequest.ProtoReflect.Descriptor instead.
func (*GetCompanyMatchRankRequest) Descriptor() ([]byte, []int) {
	return file_fund_mgr_rpc_proto_rawDescGZIP(), []int{18}
}

func (x *GetCompanyMatchRankRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCompanyMatchRankRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type GetCompanyMatchRankResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *metadata.CommonHeader  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	TotalUser    int64                   `protobuf:"varint,2,opt,name=total_user,json=totalUser,proto3" json:"total_user,omitempty"`
	TotalCompany int64                   `protobuf:"varint,3,opt,name=total_company,json=totalCompany,proto3" json:"total_company,omitempty"`
	TotalFund    int64                   `protobuf:"varint,4,opt,name=total_fund,json=totalFund,proto3" json:"total_fund,omitempty"`
	StatDate     string                  `protobuf:"bytes,5,opt,name=stat_date,json=statDate,proto3" json:"stat_date,omitempty"`
	Companies    []*metadata.CompanyRank `protobuf:"bytes,6,rep,name=companies,proto3" json:"companies,omitempty"`
}

func (x *GetCompanyMatchRankResponse) Reset() {
	*x = GetCompanyMatchRankResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fund_mgr_rpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyMatchRankResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyMatchRankResponse) ProtoMessage() {}

func (x *GetCompanyMatchRankResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fund_mgr_rpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyMatchRankResponse.ProtoReflect.Descriptor instead.
func (*GetCompanyMatchRankResponse) Descriptor() ([]byte, []int) {
	return file_fund_mgr_rpc_proto_rawDescGZIP(), []int{19}
}

func (x *GetCompanyMatchRankResponse) GetHeader() *metadata.CommonHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetCompanyMatchRankResponse) GetTotalUser() int64 {
	if x != nil {
		return x.TotalUser
	}
	return 0
}

func (x *GetCompanyMatchRankResponse) GetTotalCompany() int64 {
	if x != nil {
		return x.TotalCompany
	}
	return 0
}

func (x *GetCompanyMatchRankResponse) GetTotalFund() int64 {
	if x != nil {
		return x.TotalFund
	}
	return 0
}

func (x *GetCompanyMatchRankResponse) GetStatDate() string {
	if x != nil {
		return x.StatDate
	}
	return ""
}

func (x *GetCompanyMatchRankResponse) GetCompanies() []*metadata.CompanyRank {
	if x != nil {
		return x.Companies
	}
	return nil
}

var File_fund_mgr_rpc_proto protoreflect.FileDescriptor

var file_fund_mgr_rpc_proto_rawDesc = []byte{
	0x0a, 0x12, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x67, 0x72, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x66, 0x75, 0x6e, 0x64, 0x6d, 0x67, 0x72, 0x1a, 0x11, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x7a, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0xbb, 0x02, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x2f, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x5e, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x66, 0x75, 0x6e, 0x64, 0x6d, 0x67,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x58, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x21, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x42, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22,
	0xdf, 0x04, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x62, 0x0a, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x66, 0x75, 0x6e, 0x64, 0x6d, 0x67, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x62,
	0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x66, 0x75, 0x6e, 0x64, 0x6d, 0x67, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x42, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x1a, 0x58, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x11,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x4d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x64, 0x61,
	0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x22, 0xf1, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x64, 0x61,
	0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2f, 0x0a,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4e, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x22, 0xc4, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5b, 0x0a, 0x10, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x92, 0x02, 0x0a, 0x11, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x39,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x66, 0x75, 0x6e, 0x64, 0x6d, 0x67, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x61, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47,
	0x48, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x41, 0x4c,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x03, 0x22, 0x81, 0x01,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a,
	0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c,
	0x65, 0x22, 0xf1, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x38,
	0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x66, 0x75, 0x6e, 0x64, 0x6d,
	0x67, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x29, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x01, 0x22, 0x28, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x69, 0x64, 0x22,
	0xeb, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x66, 0x75, 0x6e, 0x64, 0x6d, 0x67, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x29, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x22, 0x6a, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x7f, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x3e, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0d, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x48, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6f, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6e, 0x67,
	0x79, 0x69, 0x2f, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x75, 0x6e, 0x64, 0x6d, 0x67, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_fund_mgr_rpc_proto_rawDescOnce sync.Once
	file_fund_mgr_rpc_proto_rawDescData = file_fund_mgr_rpc_proto_rawDesc
)

func file_fund_mgr_rpc_proto_rawDescGZIP() []byte {
	file_fund_mgr_rpc_proto_rawDescOnce.Do(func() {
		file_fund_mgr_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_fund_mgr_rpc_proto_rawDescData)
	})
	return file_fund_mgr_rpc_proto_rawDescData
}

var file_fund_mgr_rpc_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_fund_mgr_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_fund_mgr_rpc_proto_goTypes = []interface{}{
	(UserMatchResponse_Result)(0),              // 0: fundmgr.UserMatchResponse.Result
	(CreateMatchEventResponse_Status)(0),       // 1: fundmgr.CreateMatchEventResponse.Status
	(GetMatchEventResponse_Status)(0),          // 2: fundmgr.GetMatchEventResponse.Status
	(*GetUserWeekMatchRecordRequest)(nil),      // 3: fundmgr.GetUserWeekMatchRecordRequest
	(*GetUserWeekMatchRecordResponse)(nil),     // 4: fundmgr.GetUserWeekMatchRecordResponse
	(*GetUserMatchRecordByOffsetRequest)(nil),  // 5: fundmgr.GetUserMatchRecordByOffsetRequest
	(*GetUserMatchRecordByOffsetResponse)(nil), // 6: fundmgr.GetUserMatchRecordByOffsetResponse
	(*GetUserTodayMatchRequest)(nil),           // 7: fundmgr.GetUserTodayMatchRequest
	(*GetUserTodayMatchResponse)(nil),          // 8: fundmgr.GetUserTodayMatchResponse
	(*GetUserMatchDonateRequest)(nil),          // 9: fundmgr.GetUserMatchDonateRequest
	(*GetUserMatchDonateResponse)(nil),         // 10: fundmgr.GetUserMatchDonateResponse
	(*UserMatchRequest)(nil),                   // 11: fundmgr.UserMatchRequest
	(*UserMatchResponse)(nil),                  // 12: fundmgr.UserMatchResponse
	(*CreateMatchEventRequest)(nil),            // 13: fundmgr.CreateMatchEventRequest
	(*CreateMatchEventResponse)(nil),           // 14: fundmgr.CreateMatchEventResponse
	(*GetMatchEventRequest)(nil),               // 15: fundmgr.GetMatchEventRequest
	(*GetMatchEventResponse)(nil),              // 16: fundmgr.GetMatchEventResponse
	(*GetActivityMatchRankRequest)(nil),        // 17: fundmgr.GetActivityMatchRankRequest
	(*GetActivityMatchRankResponse)(nil),       // 18: fundmgr.GetActivityMatchRankResponse
	(*GetActivityMatchInfoRequest)(nil),        // 19: fundmgr.GetActivityMatchInfoRequest
	(*GetActivityMatchInfoResponse)(nil),       // 20: fundmgr.GetActivityMatchInfoResponse
	(*GetCompanyMatchRankRequest)(nil),         // 21: fundmgr.GetCompanyMatchRankRequest
	(*GetCompanyMatchRankResponse)(nil),        // 22: fundmgr.GetCompanyMatchRankResponse
	nil,                                        // 23: fundmgr.GetUserWeekMatchRecordResponse.ActivityInfoEntry
	nil,                                        // 24: fundmgr.GetUserMatchRecordByOffsetResponse.ActivityInfoEntry
	nil,                                        // 25: fundmgr.GetUserMatchRecordByOffsetResponse.UserActivityEntry
	(*metadata.CommonHeader)(nil),              // 26: metadata.CommonHeader
	(*metadata.MatchRecord)(nil),               // 27: metadata.MatchRecord
	(*metadata.MatchActivity)(nil),             // 28: metadata.MatchActivity
	(*metadata.MatchStatus)(nil),               // 29: metadata.MatchStatus
	(*metadata.MatchInfo)(nil),                 // 30: metadata.MatchInfo
	(*metadata.MatchRule)(nil),                 // 31: metadata.MatchRule
	(*metadata.UserRank)(nil),                  // 32: metadata.UserRank
	(*metadata.CompanyRank)(nil),               // 33: metadata.CompanyRank
	(*metadata.Activity)(nil),                  // 34: metadata.Activity
}
var file_fund_mgr_rpc_proto_depIdxs = []int32{
	26, // 0: fundmgr.GetUserWeekMatchRecordResponse.header:type_name -> metadata.CommonHeader
	27, // 1: fundmgr.GetUserWeekMatchRecordResponse.records:type_name -> metadata.MatchRecord
	23, // 2: fundmgr.GetUserWeekMatchRecordResponse.activity_info:type_name -> fundmgr.GetUserWeekMatchRecordResponse.ActivityInfoEntry
	26, // 3: fundmgr.GetUserMatchRecordByOffsetResponse.header:type_name -> metadata.CommonHeader
	27, // 4: fundmgr.GetUserMatchRecordByOffsetResponse.records:type_name -> metadata.MatchRecord
	24, // 5: fundmgr.GetUserMatchRecordByOffsetResponse.activity_info:type_name -> fundmgr.GetUserMatchRecordByOffsetResponse.ActivityInfoEntry
	25, // 6: fundmgr.GetUserMatchRecordByOffsetResponse.user_activity:type_name -> fundmgr.GetUserMatchRecordByOffsetResponse.UserActivityEntry
	26, // 7: fundmgr.GetUserTodayMatchResponse.header:type_name -> metadata.CommonHeader
	27, // 8: fundmgr.GetUserTodayMatchResponse.records:type_name -> metadata.MatchRecord
	28, // 9: fundmgr.GetUserTodayMatchResponse.activity_info:type_name -> metadata.MatchActivity
	26, // 10: fundmgr.GetUserMatchDonateResponse.header:type_name -> metadata.CommonHeader
	29, // 11: fundmgr.GetUserMatchDonateResponse.match_status:type_name -> metadata.MatchStatus
	28, // 12: fundmgr.GetUserMatchDonateResponse.activity_info:type_name -> metadata.MatchActivity
	26, // 13: fundmgr.UserMatchResponse.header:type_name -> metadata.CommonHeader
	0,  // 14: fundmgr.UserMatchResponse.result:type_name -> fundmgr.UserMatchResponse.Result
	27, // 15: fundmgr.UserMatchResponse.records:type_name -> metadata.MatchRecord
	30, // 16: fundmgr.CreateMatchEventRequest.match_info:type_name -> metadata.MatchInfo
	31, // 17: fundmgr.CreateMatchEventRequest.match_rule:type_name -> metadata.MatchRule
	26, // 18: fundmgr.CreateMatchEventResponse.header:type_name -> metadata.CommonHeader
	28, // 19: fundmgr.CreateMatchEventResponse.match_event:type_name -> metadata.MatchActivity
	1,  // 20: fundmgr.CreateMatchEventResponse.status:type_name -> fundmgr.CreateMatchEventResponse.Status
	26, // 21: fundmgr.GetMatchEventResponse.header:type_name -> metadata.CommonHeader
	28, // 22: fundmgr.GetMatchEventResponse.match_event:type_name -> metadata.MatchActivity
	2,  // 23: fundmgr.GetMatchEventResponse.status:type_name -> fundmgr.GetMatchEventResponse.Status
	26, // 24: fundmgr.GetActivityMatchRankResponse.header:type_name -> metadata.CommonHeader
	32, // 25: fundmgr.GetActivityMatchRankResponse.user_rank:type_name -> metadata.UserRank
	26, // 26: fundmgr.GetActivityMatchInfoResponse.header:type_name -> metadata.CommonHeader
	28, // 27: fundmgr.GetActivityMatchInfoResponse.activity_info:type_name -> metadata.MatchActivity
	26, // 28: fundmgr.GetCompanyMatchRankResponse.header:type_name -> metadata.CommonHeader
	33, // 29: fundmgr.GetCompanyMatchRankResponse.companies:type_name -> metadata.CompanyRank
	28, // 30: fundmgr.GetUserWeekMatchRecordResponse.ActivityInfoEntry.value:type_name -> metadata.MatchActivity
	28, // 31: fundmgr.GetUserMatchRecordByOffsetResponse.ActivityInfoEntry.value:type_name -> metadata.MatchActivity
	34, // 32: fundmgr.GetUserMatchRecordByOffsetResponse.UserActivityEntry.value:type_name -> metadata.Activity
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_fund_mgr_rpc_proto_init() }
func file_fund_mgr_rpc_proto_init() {
	if File_fund_mgr_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fund_mgr_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserWeekMatchRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fund_mgr_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserWeekMatchRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fund_mgr_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserMatchRecordByOffsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fund_mgr_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserMatchRecordByOffsetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fund_mgr_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserTodayMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fund_mgr_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserTodayMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fund_mgr_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserMatchDonateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fund_mgr_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserMatchDonateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fund_mgr_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fund_mgr_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fund_mgr_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMatchEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fund_mgr_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMatchEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fund_mgr_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fund_mgr_rpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fund_mgr_rpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityMatchRankRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fund_mgr_rpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityMatchRankResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fund_mgr_rpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityMatchInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fund_mgr_rpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityMatchInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fund_mgr_rpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyMatchRankRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fund_mgr_rpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyMatchRankResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fund_mgr_rpc_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fund_mgr_rpc_proto_goTypes,
		DependencyIndexes: file_fund_mgr_rpc_proto_depIdxs,
		EnumInfos:         file_fund_mgr_rpc_proto_enumTypes,
		MessageInfos:      file_fund_mgr_rpc_proto_msgTypes,
	}.Build()
	File_fund_mgr_rpc_proto = out.File
	file_fund_mgr_rpc_proto_rawDesc = nil
	file_fund_mgr_rpc_proto_goTypes = nil
	file_fund_mgr_rpc_proto_depIdxs = nil
}
