//

// Package errors is automatically generated by translator, please do not make any changes!
package errors

import "strconv"
import "fmt"

// define all errorCode's value
const (
	Success                                   = 0
	UnknownError                              = -1
	ParamInvalid                              = -2
	InternalError                             = -3
	ConfigError                               = -4
	DBClientError                             = -5
	DBNilError                                = -6
	RedisClientError                          = -7
	RedisNilError                             = -8
	JsonParseError                            = -9
	CkvClientError                            = -10
	NoPermission                              = -11
	WxClientFailedError                       = -12
	WxClientNoAuthError                       = -13
	OpsNeedRetryError                         = -20
	FuncRegisterError                         = -21
	FundMgrUnknownError                       = -100000
	FundMgrParamInvalid                       = -100001
	FundMgrInternalError                      = -100002
	FundMgrNoRecordError                      = -100003
	FundMgrAlreadyMatchError                  = -100004
	FundMgrMatchNotStartError                 = -100030
	FundMgrMatchOverEndError                  = -100031
	FundMgrMatchExceedError                   = -100032
	FundMgrMatchNotExistError                 = -100033
	FundMgrMatchGenerateError                 = -100034
	StepMgrUnknownError                       = -110000
	StepMgrTimeoutError                       = -110001
	StepMgrParamInvalid                       = -110002
	StepMgrInternalError                      = -110003
	StepMgrIncompleteError                    = -110004
	StepMgrOpsDenyError                       = -110005
	ActivityMgrUnknownError                   = -120000
	ActivityMgrRepeatOperError                = -120001
	ActivityMgrJoinActivityLimitError         = -120002
	ActivityMgrJoinTeamLimitError             = -120003
	ActivityMgrParamInvalid                   = -120004
	ActivityMgrInternalError                  = -120005
	ActivityMgrOpsForbidError                 = -120006
	ActivityMgrCreateLimitError               = -120007
	ActivityMgrOpsStartTimeError              = -120008
	ActivityMgrOpsOverTimeError               = -120009
	ActivityMgrOpsNotSelfError                = -120010
	ActivityMgrTopLimitError                  = -120011
	ActivityMgrOverMaxJoinLimitError          = -120012
	ActivityMgrOverTeamMemberLimitError       = -120013
	ActivityMgrDeleteActivityCreatorError     = -120014
	ActivityMgrQryCouponsRespInvalidCodeError = -120015
	ActivityMgrQryCouponsInnerError           = -120016
)

type errorCode struct {
	// the value of ErrorType
	errCode int
	// the name of ErrorType
	errName string
	// the detail of ErrorType
	errMsg string
	// the KeyValue-pair of ErrorType
	errValue map[string]string
}

func (e *errorCode) Error() string {
	if e != nil {
		if e.errValue != nil {
			return strconv.Itoa(e.errCode) + "|" + e.errName + "|" + e.errMsg + "|" + fmt.Sprintf("%v", e.errValue)
		}
		return strconv.Itoa(e.errCode) + "|" + e.errName + "|" + e.errMsg
	}
	return ""
}

type ErrorOption func(*errorCode)

func applyErrorOptions(errCode *errorCode, options ...ErrorOption) *errorCode {
	for _, option := range options {
		option(errCode)
	}
	return errCode
}

// WithMsg is used to set additional message for user
func WithMsg(format string, args ...interface{}) ErrorOption {
	return func(err *errorCode) {
		err.errMsg = fmt.Sprintf(format, args...)
	}
}

// WithValue is used to set key-value-pair
func WithValue(key, value string) ErrorOption {
	return func(err *errorCode) {
		err.errValue[key] = value
	}
}

// GetErrorCode return the error's code when the error is errorCode
func GetErrorCode(err error) (int, bool) {
	if errCode, ok := err.(*errorCode); ok {
		return errCode.errCode, true
	}
	return 0, false
}

// GetValue return Value
func GetValue(err error, key string) (string, bool) {
	if errCode, ok := err.(*errorCode); ok {
		if value, ok := errCode.errValue[key]; ok {
			return value, true
		}
	}
	return "", false
}

// NewSuccess create a error
func NewSuccess(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  0,
		errName:  "Success",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsSuccess check whether the error is Success
func IsSuccess(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "Success"
	}
	return false
}

// NewUnknownError create a error
func NewUnknownError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -1,
		errName:  "UnknownError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsUnknownError check whether the error is UnknownError
func IsUnknownError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "UnknownError"
	}
	return false
}

// NewParamInvalid create a error
func NewParamInvalid(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -2,
		errName:  "ParamInvalid",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsParamInvalid check whether the error is ParamInvalid
func IsParamInvalid(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "ParamInvalid"
	}
	return false
}

// NewInternalError create a error
func NewInternalError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -3,
		errName:  "InternalError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsInternalError check whether the error is InternalError
func IsInternalError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "InternalError"
	}
	return false
}

// NewConfigError create a error
func NewConfigError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -4,
		errName:  "ConfigError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsConfigError check whether the error is ConfigError
func IsConfigError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "ConfigError"
	}
	return false
}

// NewDBClientError create a error
func NewDBClientError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -5,
		errName:  "DBClientError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsDBClientError check whether the error is DBClientError
func IsDBClientError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "DBClientError"
	}
	return false
}

// NewDBNilError create a error
func NewDBNilError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -6,
		errName:  "DBNilError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsDBNilError check whether the error is DBNilError
func IsDBNilError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "DBNilError"
	}
	return false
}

// NewRedisClientError create a error
func NewRedisClientError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -7,
		errName:  "RedisClientError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsRedisClientError check whether the error is RedisClientError
func IsRedisClientError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "RedisClientError"
	}
	return false
}

// NewRedisNilError create a error
func NewRedisNilError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -8,
		errName:  "RedisNilError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsRedisNilError check whether the error is RedisNilError
func IsRedisNilError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "RedisNilError"
	}
	return false
}

// NewJsonParseError create a error
func NewJsonParseError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -9,
		errName:  "JsonParseError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsJsonParseError check whether the error is JsonParseError
func IsJsonParseError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "JsonParseError"
	}
	return false
}

// NewCkvClientError create a error
func NewCkvClientError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -10,
		errName:  "CkvClientError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsCkvClientError check whether the error is CkvClientError
func IsCkvClientError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "CkvClientError"
	}
	return false
}

// NewNoPermission create a error
func NewNoPermission(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -11,
		errName:  "NoPermission",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsNoPermission check whether the error is NoPermission
func IsNoPermission(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "NoPermission"
	}
	return false
}

// NewWxClientFailedError create a error
func NewWxClientFailedError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -12,
		errName:  "WxClientFailedError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsWxClientFailedError check whether the error is WxClientFailedError
func IsWxClientFailedError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "WxClientFailedError"
	}
	return false
}

// NewWxClientNoAuthError create a error
func NewWxClientNoAuthError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -13,
		errName:  "WxClientNoAuthError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsWxClientNoAuthError check whether the error is WxClientNoAuthError
func IsWxClientNoAuthError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "WxClientNoAuthError"
	}
	return false
}

// NewOpsNeedRetryError create a error
func NewOpsNeedRetryError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -20,
		errName:  "OpsNeedRetryError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsOpsNeedRetryError check whether the error is OpsNeedRetryError
func IsOpsNeedRetryError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "OpsNeedRetryError"
	}
	return false
}

// NewFuncRegisterError create a error
func NewFuncRegisterError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -21,
		errName:  "FuncRegisterError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsFuncRegisterError check whether the error is FuncRegisterError
func IsFuncRegisterError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "FuncRegisterError"
	}
	return false
}

// NewFundMgrUnknownError create a error
func NewFundMgrUnknownError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -100000,
		errName:  "FundMgrUnknownError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsFundMgrUnknownError check whether the error is FundMgrUnknownError
func IsFundMgrUnknownError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "FundMgrUnknownError"
	}
	return false
}

// NewFundMgrParamInvalid create a error
func NewFundMgrParamInvalid(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -100001,
		errName:  "FundMgrParamInvalid",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsFundMgrParamInvalid check whether the error is FundMgrParamInvalid
func IsFundMgrParamInvalid(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "FundMgrParamInvalid"
	}
	return false
}

// NewFundMgrInternalError create a error
func NewFundMgrInternalError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -100002,
		errName:  "FundMgrInternalError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsFundMgrInternalError check whether the error is FundMgrInternalError
func IsFundMgrInternalError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "FundMgrInternalError"
	}
	return false
}

// NewFundMgrNoRecordError create a error
func NewFundMgrNoRecordError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -100003,
		errName:  "FundMgrNoRecordError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsFundMgrNoRecordError check whether the error is FundMgrNoRecordError
func IsFundMgrNoRecordError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "FundMgrNoRecordError"
	}
	return false
}

// NewFundMgrAlreadyMatchError create a error
func NewFundMgrAlreadyMatchError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -100004,
		errName:  "FundMgrAlreadyMatchError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsFundMgrAlreadyMatchError check whether the error is FundMgrAlreadyMatchError
func IsFundMgrAlreadyMatchError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "FundMgrAlreadyMatchError"
	}
	return false
}

// NewFundMgrMatchNotStartError create a error
func NewFundMgrMatchNotStartError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -100030,
		errName:  "FundMgrMatchNotStartError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsFundMgrMatchNotStartError check whether the error is FundMgrMatchNotStartError
func IsFundMgrMatchNotStartError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "FundMgrMatchNotStartError"
	}
	return false
}

// NewFundMgrMatchOverEndError create a error
func NewFundMgrMatchOverEndError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -100031,
		errName:  "FundMgrMatchOverEndError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsFundMgrMatchOverEndError check whether the error is FundMgrMatchOverEndError
func IsFundMgrMatchOverEndError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "FundMgrMatchOverEndError"
	}
	return false
}

// NewFundMgrMatchExceedError create a error
func NewFundMgrMatchExceedError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -100032,
		errName:  "FundMgrMatchExceedError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsFundMgrMatchExceedError check whether the error is FundMgrMatchExceedError
func IsFundMgrMatchExceedError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "FundMgrMatchExceedError"
	}
	return false
}

// NewFundMgrMatchNotExistError create a error
func NewFundMgrMatchNotExistError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -100033,
		errName:  "FundMgrMatchNotExistError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsFundMgrMatchNotExistError check whether the error is FundMgrMatchNotExistError
func IsFundMgrMatchNotExistError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "FundMgrMatchNotExistError"
	}
	return false
}

// NewFundMgrMatchGenerateError create a error
func NewFundMgrMatchGenerateError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -100034,
		errName:  "FundMgrMatchGenerateError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsFundMgrMatchGenerateError check whether the error is FundMgrMatchGenerateError
func IsFundMgrMatchGenerateError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "FundMgrMatchGenerateError"
	}
	return false
}

// NewStepMgrUnknownError create a error
func NewStepMgrUnknownError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -110000,
		errName:  "StepMgrUnknownError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsStepMgrUnknownError check whether the error is StepMgrUnknownError
func IsStepMgrUnknownError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "StepMgrUnknownError"
	}
	return false
}

// NewStepMgrTimeoutError create a error
func NewStepMgrTimeoutError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -110001,
		errName:  "StepMgrTimeoutError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsStepMgrTimeoutError check whether the error is StepMgrTimeoutError
func IsStepMgrTimeoutError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "StepMgrTimeoutError"
	}
	return false
}

// NewStepMgrParamInvalid create a error
func NewStepMgrParamInvalid(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -110002,
		errName:  "StepMgrParamInvalid",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsStepMgrParamInvalid check whether the error is StepMgrParamInvalid
func IsStepMgrParamInvalid(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "StepMgrParamInvalid"
	}
	return false
}

// NewStepMgrInternalError create a error
func NewStepMgrInternalError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -110003,
		errName:  "StepMgrInternalError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsStepMgrInternalError check whether the error is StepMgrInternalError
func IsStepMgrInternalError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "StepMgrInternalError"
	}
	return false
}

// NewStepMgrIncompleteError create a error
func NewStepMgrIncompleteError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -110004,
		errName:  "StepMgrIncompleteError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsStepMgrIncompleteError check whether the error is StepMgrIncompleteError
func IsStepMgrIncompleteError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "StepMgrIncompleteError"
	}
	return false
}

// NewStepMgrOpsDenyError create a error
func NewStepMgrOpsDenyError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -110005,
		errName:  "StepMgrOpsDenyError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsStepMgrOpsDenyError check whether the error is StepMgrOpsDenyError
func IsStepMgrOpsDenyError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "StepMgrOpsDenyError"
	}
	return false
}

// NewActivityMgrUnknownError create a error
func NewActivityMgrUnknownError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -120000,
		errName:  "ActivityMgrUnknownError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsActivityMgrUnknownError check whether the error is ActivityMgrUnknownError
func IsActivityMgrUnknownError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "ActivityMgrUnknownError"
	}
	return false
}

// NewActivityMgrRepeatOperError create a error
func NewActivityMgrRepeatOperError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -120001,
		errName:  "ActivityMgrRepeatOperError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsActivityMgrRepeatOperError check whether the error is ActivityMgrRepeatOperError
func IsActivityMgrRepeatOperError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "ActivityMgrRepeatOperError"
	}
	return false
}

// NewActivityMgrJoinActivityLimitError create a error
func NewActivityMgrJoinActivityLimitError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -120002,
		errName:  "ActivityMgrJoinActivityLimitError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsActivityMgrJoinActivityLimitError check whether the error is ActivityMgrJoinActivityLimitError
func IsActivityMgrJoinActivityLimitError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "ActivityMgrJoinActivityLimitError"
	}
	return false
}

// NewActivityMgrJoinTeamLimitError create a error
func NewActivityMgrJoinTeamLimitError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -120003,
		errName:  "ActivityMgrJoinTeamLimitError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsActivityMgrJoinTeamLimitError check whether the error is ActivityMgrJoinTeamLimitError
func IsActivityMgrJoinTeamLimitError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "ActivityMgrJoinTeamLimitError"
	}
	return false
}

// NewActivityMgrParamInvalid create a error
func NewActivityMgrParamInvalid(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -120004,
		errName:  "ActivityMgrParamInvalid",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsActivityMgrParamInvalid check whether the error is ActivityMgrParamInvalid
func IsActivityMgrParamInvalid(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "ActivityMgrParamInvalid"
	}
	return false
}

// NewActivityMgrInternalError create a error
func NewActivityMgrInternalError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -120005,
		errName:  "ActivityMgrInternalError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsActivityMgrInternalError check whether the error is ActivityMgrInternalError
func IsActivityMgrInternalError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "ActivityMgrInternalError"
	}
	return false
}

// NewActivityMgrOpsForbidError create a error
func NewActivityMgrOpsForbidError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -120006,
		errName:  "ActivityMgrOpsForbidError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsActivityMgrOpsForbidError check whether the error is ActivityMgrOpsForbidError
func IsActivityMgrOpsForbidError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "ActivityMgrOpsForbidError"
	}
	return false
}

// NewActivityMgrCreateLimitError create a error
func NewActivityMgrCreateLimitError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -120007,
		errName:  "ActivityMgrCreateLimitError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsActivityMgrCreateLimitError check whether the error is ActivityMgrCreateLimitError
func IsActivityMgrCreateLimitError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "ActivityMgrCreateLimitError"
	}
	return false
}

// NewActivityMgrOpsStartTimeError create a error
func NewActivityMgrOpsStartTimeError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -120008,
		errName:  "ActivityMgrOpsStartTimeError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsActivityMgrOpsStartTimeError check whether the error is ActivityMgrOpsStartTimeError
func IsActivityMgrOpsStartTimeError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "ActivityMgrOpsStartTimeError"
	}
	return false
}

// NewActivityMgrOpsOverTimeError create a error
func NewActivityMgrOpsOverTimeError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -120009,
		errName:  "ActivityMgrOpsOverTimeError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsActivityMgrOpsOverTimeError check whether the error is ActivityMgrOpsOverTimeError
func IsActivityMgrOpsOverTimeError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "ActivityMgrOpsOverTimeError"
	}
	return false
}

// NewActivityMgrOpsNotSelfError create a error
func NewActivityMgrOpsNotSelfError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -120010,
		errName:  "ActivityMgrOpsNotSelfError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsActivityMgrOpsNotSelfError check whether the error is ActivityMgrOpsNotSelfError
func IsActivityMgrOpsNotSelfError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "ActivityMgrOpsNotSelfError"
	}
	return false
}

// NewActivityMgrTopLimitError create a error
func NewActivityMgrTopLimitError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -120011,
		errName:  "ActivityMgrTopLimitError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsActivityMgrTopLimitError check whether the error is ActivityMgrTopLimitError
func IsActivityMgrTopLimitError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "ActivityMgrTopLimitError"
	}
	return false
}

// NewActivityMgrOverMaxJoinLimitError create a error
func NewActivityMgrOverMaxJoinLimitError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -120012,
		errName:  "ActivityMgrOverMaxJoinLimitError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsActivityMgrOverMaxJoinLimitError check whether the error is ActivityMgrOverMaxJoinLimitError
func IsActivityMgrOverMaxJoinLimitError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "ActivityMgrOverMaxJoinLimitError"
	}
	return false
}

// NewActivityMgrOverTeamMemberLimitError create a error
func NewActivityMgrOverTeamMemberLimitError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -120013,
		errName:  "ActivityMgrOverTeamMemberLimitError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsActivityMgrOverTeamMemberLimitError check whether the error is ActivityMgrOverTeamMemberLimitError
func IsActivityMgrOverTeamMemberLimitError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "ActivityMgrOverTeamMemberLimitError"
	}
	return false
}

// NewActivityMgrDeleteActivityCreatorError create a error
func NewActivityMgrDeleteActivityCreatorError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -120014,
		errName:  "ActivityMgrDeleteActivityCreatorError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsActivityMgrDeleteActivityCreatorError check whether the error is ActivityMgrDeleteActivityCreatorError
func IsActivityMgrDeleteActivityCreatorError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "ActivityMgrDeleteActivityCreatorError"
	}
	return false
}

// NewActivityMgrQryCouponsRespInvalidCodeError create a error
func NewActivityMgrQryCouponsRespInvalidCodeError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -120015,
		errName:  "ActivityMgrQryCouponsRespInvalidCodeError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsActivityMgrQryCouponsRespInvalidCodeError check whether the error is ActivityMgrQryCouponsRespInvalidCodeError
func IsActivityMgrQryCouponsRespInvalidCodeError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "ActivityMgrQryCouponsRespInvalidCodeError"
	}
	return false
}

// NewActivityMgrQryCouponsInnerError create a error
func NewActivityMgrQryCouponsInnerError(option ...ErrorOption) error {
	errCode := &errorCode{
		errCode:  -120016,
		errName:  "ActivityMgrQryCouponsInnerError",
		errValue: make(map[string]string),
	}
	return applyErrorOptions(errCode, option...)
}

// IsActivityMgrQryCouponsInnerError check whether the error is ActivityMgrQryCouponsInnerError
func IsActivityMgrQryCouponsInnerError(err error) bool {
	if origin, ok := err.(*errorCode); ok {
		return origin.errName == "ActivityMgrQryCouponsInnerError"
	}
	return false
}

// IsLogicError check whether the error's category is LogicError
func IsLogicError(err error) bool {
	code, ok := GetErrorCode(err)
	if !ok {
		return false
	}
	switch code {
	default:
		return false
	}
}

// IsIOError check whether the error's category is IOError
func IsIOError(err error) bool {
	code, ok := GetErrorCode(err)
	if !ok {
		return false
	}
	switch code {
	default:
		return false
	}
}

// IsSystemError check whether the error's category is SystemError
func IsSystemError(err error) bool {
	code, ok := GetErrorCode(err)
	if !ok {
		return false
	}
	switch code {
	default:
		return false
	}
}

// IsThirdLibraryError check whether the error's category is ThirdLibraryError
func IsThirdLibraryError(err error) bool {
	code, ok := GetErrorCode(err)
	if !ok {
		return false
	}
	switch code {
	default:
		return false
	}
}

// IsExportedType check whether the error's category is ExportedType
func IsExportedType(err error) bool {
	code, ok := GetErrorCode(err)
	if !ok {
		return false
	}
	switch code {
	case -2:
		return true
	case -3:
		return true
	case -20:
		return true
	case -100001:
		return true
	case -100002:
		return true
	case -100003:
		return true
	case -100004:
		return true
	case -100030:
		return true
	case -100031:
		return true
	case -100032:
		return true
	case -100033:
		return true
	case -100034:
		return true
	case -110002:
		return true
	case -110003:
		return true
	case -110004:
		return true
	case -110005:
		return true
	case -120004:
		return true
	case -120005:
		return true
	case -120006:
		return true
	case -120007:
		return true
	case -120008:
		return true
	case -120009:
		return true
	case -120010:
		return true
	case -120011:
		return true
	case -120012:
		return true
	case -120013:
		return true
	case -120014:
		return true
	case -120015:
		return true
	case -120016:
		return true
	default:
		return false
	}
}

// NewError is used to create a error by errorCode's value
func NewError(code int, option ...ErrorOption) error {
	errCode := &errorCode{
		errCode: code,
	}
	switch code {
	case 0:
		errCode.errName = "Success"
	case -1:
		errCode.errName = "UnknownError"
	case -2:
		errCode.errName = "ParamInvalid"
	case -3:
		errCode.errName = "InternalError"
	case -4:
		errCode.errName = "ConfigError"
	case -5:
		errCode.errName = "DBClientError"
	case -6:
		errCode.errName = "DBNilError"
	case -7:
		errCode.errName = "RedisClientError"
	case -8:
		errCode.errName = "RedisNilError"
	case -9:
		errCode.errName = "JsonParseError"
	case -10:
		errCode.errName = "CkvClientError"
	case -11:
		errCode.errName = "NoPermission"
	case -12:
		errCode.errName = "WxClientFailedError"
	case -13:
		errCode.errName = "WxClientNoAuthError"
	case -20:
		errCode.errName = "OpsNeedRetryError"
	case -21:
		errCode.errName = "FuncRegisterError"
	case -100000:
		errCode.errName = "FundMgrUnknownError"
	case -100001:
		errCode.errName = "FundMgrParamInvalid"
	case -100002:
		errCode.errName = "FundMgrInternalError"
	case -100003:
		errCode.errName = "FundMgrNoRecordError"
	case -100004:
		errCode.errName = "FundMgrAlreadyMatchError"
	case -100030:
		errCode.errName = "FundMgrMatchNotStartError"
	case -100031:
		errCode.errName = "FundMgrMatchOverEndError"
	case -100032:
		errCode.errName = "FundMgrMatchExceedError"
	case -100033:
		errCode.errName = "FundMgrMatchNotExistError"
	case -100034:
		errCode.errName = "FundMgrMatchGenerateError"
	case -110000:
		errCode.errName = "StepMgrUnknownError"
	case -110001:
		errCode.errName = "StepMgrTimeoutError"
	case -110002:
		errCode.errName = "StepMgrParamInvalid"
	case -110003:
		errCode.errName = "StepMgrInternalError"
	case -110004:
		errCode.errName = "StepMgrIncompleteError"
	case -110005:
		errCode.errName = "StepMgrOpsDenyError"
	case -120000:
		errCode.errName = "ActivityMgrUnknownError"
	case -120001:
		errCode.errName = "ActivityMgrRepeatOperError"
	case -120002:
		errCode.errName = "ActivityMgrJoinActivityLimitError"
	case -120003:
		errCode.errName = "ActivityMgrJoinTeamLimitError"
	case -120004:
		errCode.errName = "ActivityMgrParamInvalid"
	case -120005:
		errCode.errName = "ActivityMgrInternalError"
	case -120006:
		errCode.errName = "ActivityMgrOpsForbidError"
	case -120007:
		errCode.errName = "ActivityMgrCreateLimitError"
	case -120008:
		errCode.errName = "ActivityMgrOpsStartTimeError"
	case -120009:
		errCode.errName = "ActivityMgrOpsOverTimeError"
	case -120010:
		errCode.errName = "ActivityMgrOpsNotSelfError"
	case -120011:
		errCode.errName = "ActivityMgrTopLimitError"
	case -120012:
		errCode.errName = "ActivityMgrOverMaxJoinLimitError"
	case -120013:
		errCode.errName = "ActivityMgrOverTeamMemberLimitError"
	case -120014:
		errCode.errName = "ActivityMgrDeleteActivityCreatorError"
	case -120015:
		errCode.errName = "ActivityMgrQryCouponsRespInvalidCodeError"
	case -120016:
		errCode.errName = "ActivityMgrQryCouponsInnerError"
	default:
		errCode.errName = "UnknownErrorName"
	}
	return applyErrorOptions(errCode, option...)
}
