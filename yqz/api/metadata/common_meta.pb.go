//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: common_meta.proto

package metadata

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommentType int32

const (
	CommentType_CommentType_SYSTEM CommentType = 0
	CommentType_CommentType_USER   CommentType = 1
)

// Enum value maps for CommentType.
var (
	CommentType_name = map[int32]string{
		0: "CommentType_SYSTEM",
		1: "CommentType_USER",
	}
	CommentType_value = map[string]int32{
		"CommentType_SYSTEM": 0,
		"CommentType_USER":   1,
	}
)

func (x CommentType) Enum() *CommentType {
	p := new(CommentType)
	*p = x
	return p
}

func (x CommentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommentType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_meta_proto_enumTypes[0].Descriptor()
}

func (CommentType) Type() protoreflect.EnumType {
	return &file_common_meta_proto_enumTypes[0]
}

func (x CommentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommentType.Descriptor instead.
func (CommentType) EnumDescriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{0}
}

type TargetType int32

const (
	TargetType_TargetType_YQZ      TargetType = 0
	TargetType_TargetType_COMMENT  TargetType = 1
	TargetType_TargetType_ACTIVITY TargetType = 2 //REPLY = 3;
)

// Enum value maps for TargetType.
var (
	TargetType_name = map[int32]string{
		0: "TargetType_YQZ",
		1: "TargetType_COMMENT",
		2: "TargetType_ACTIVITY",
	}
	TargetType_value = map[string]int32{
		"TargetType_YQZ":      0,
		"TargetType_COMMENT":  1,
		"TargetType_ACTIVITY": 2,
	}
)

func (x TargetType) Enum() *TargetType {
	p := new(TargetType)
	*p = x
	return p
}

func (x TargetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TargetType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_meta_proto_enumTypes[1].Descriptor()
}

func (TargetType) Type() protoreflect.EnumType {
	return &file_common_meta_proto_enumTypes[1]
}

func (x TargetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TargetType.Descriptor instead.
func (TargetType) EnumDescriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{1}
}

type MatchRecord_OPType int32

const (
	MatchRecord_UNKNOWN MatchRecord_OPType = 0
	MatchRecord_NORMAL  MatchRecord_OPType = 1
	MatchRecord_BUFF    MatchRecord_OPType = 2
)

// Enum value maps for MatchRecord_OPType.
var (
	MatchRecord_OPType_name = map[int32]string{
		0: "UNKNOWN",
		1: "NORMAL",
		2: "BUFF",
	}
	MatchRecord_OPType_value = map[string]int32{
		"UNKNOWN": 0,
		"NORMAL":  1,
		"BUFF":    2,
	}
)

func (x MatchRecord_OPType) Enum() *MatchRecord_OPType {
	p := new(MatchRecord_OPType)
	*p = x
	return p
}

func (x MatchRecord_OPType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchRecord_OPType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_meta_proto_enumTypes[2].Descriptor()
}

func (MatchRecord_OPType) Type() protoreflect.EnumType {
	return &file_common_meta_proto_enumTypes[2]
}

func (x MatchRecord_OPType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchRecord_OPType.Descriptor instead.
func (MatchRecord_OPType) EnumDescriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{1, 0}
}

type MatchInfo_Status int32

const (
	MatchInfo_PREPARE      MatchInfo_Status = 0 // 活动未开始
	MatchInfo_RUNNING      MatchInfo_Status = 1 // 活动进行中
	MatchInfo_SPENT_FINISH MatchInfo_Status = 2 // 配捐完成, 用完配捐金额
	MatchInfo_EXPIRED      MatchInfo_Status = 3 // 配捐时间结束, 未用完配捐金额
)

// Enum value maps for MatchInfo_Status.
var (
	MatchInfo_Status_name = map[int32]string{
		0: "PREPARE",
		1: "RUNNING",
		2: "SPENT_FINISH",
		3: "EXPIRED",
	}
	MatchInfo_Status_value = map[string]int32{
		"PREPARE":      0,
		"RUNNING":      1,
		"SPENT_FINISH": 2,
		"EXPIRED":      3,
	}
)

func (x MatchInfo_Status) Enum() *MatchInfo_Status {
	p := new(MatchInfo_Status)
	*p = x
	return p
}

func (x MatchInfo_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchInfo_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_common_meta_proto_enumTypes[3].Descriptor()
}

func (MatchInfo_Status) Type() protoreflect.EnumType {
	return &file_common_meta_proto_enumTypes[3]
}

func (x MatchInfo_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchInfo_Status.Descriptor instead.
func (MatchInfo_Status) EnumDescriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{10, 0}
}

type MatchInfo_MatchMode int32

const (
	MatchInfo_MODE_AVERAGE MatchInfo_MatchMode = 0 // 平均配捐(小池子, 每日上限)
	MatchInfo_MODE_TOTAL   MatchInfo_MatchMode = 1 // 累计配捐(大池子, 无每日上限)
	MatchInfo_MODE_REMAIN  MatchInfo_MatchMode = 2 // 剩余配捐(根据剩余金额决定配捐金额)
)

// Enum value maps for MatchInfo_MatchMode.
var (
	MatchInfo_MatchMode_name = map[int32]string{
		0: "MODE_AVERAGE",
		1: "MODE_TOTAL",
		2: "MODE_REMAIN",
	}
	MatchInfo_MatchMode_value = map[string]int32{
		"MODE_AVERAGE": 0,
		"MODE_TOTAL":   1,
		"MODE_REMAIN":  2,
	}
)

func (x MatchInfo_MatchMode) Enum() *MatchInfo_MatchMode {
	p := new(MatchInfo_MatchMode)
	*p = x
	return p
}

func (x MatchInfo_MatchMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchInfo_MatchMode) Descriptor() protoreflect.EnumDescriptor {
	return file_common_meta_proto_enumTypes[4].Descriptor()
}

func (MatchInfo_MatchMode) Type() protoreflect.EnumType {
	return &file_common_meta_proto_enumTypes[4]
}

func (x MatchInfo_MatchMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchInfo_MatchMode.Descriptor instead.
func (MatchInfo_MatchMode) EnumDescriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{10, 1}
}

type MatchRule_RuleType int32

const (
	MatchRule_BUFF_COMBO    MatchRule_RuleType = 0 // BUFF连续配捐规则
	MatchRule_BUFF_PERCENT  MatchRule_RuleType = 1 // BUFF百分比配捐规则
	MatchRule_REMAIN        MatchRule_RuleType = 2 // 剩余配捐规则
	MatchRule_STEP_RELATIVE MatchRule_RuleType = 3 // 剩余配捐规则
)

// Enum value maps for MatchRule_RuleType.
var (
	MatchRule_RuleType_name = map[int32]string{
		0: "BUFF_COMBO",
		1: "BUFF_PERCENT",
		2: "REMAIN",
		3: "STEP_RELATIVE",
	}
	MatchRule_RuleType_value = map[string]int32{
		"BUFF_COMBO":    0,
		"BUFF_PERCENT":  1,
		"REMAIN":        2,
		"STEP_RELATIVE": 3,
	}
)

func (x MatchRule_RuleType) Enum() *MatchRule_RuleType {
	p := new(MatchRule_RuleType)
	*p = x
	return p
}

func (x MatchRule_RuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchRule_RuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_meta_proto_enumTypes[5].Descriptor()
}

func (MatchRule_RuleType) Type() protoreflect.EnumType {
	return &file_common_meta_proto_enumTypes[5]
}

func (x MatchRule_RuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchRule_RuleType.Descriptor instead.
func (MatchRule_RuleType) EnumDescriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{12, 0}
}

type Activity_Status int32

const (
	Activity_DRAFT   Activity_Status = 0 // 未审核(手机端发起支付成功才审核通过)
	Activity_READY   Activity_Status = 1 // 活动未开始
	Activity_RUNNING Activity_Status = 2 // 活动进行中
	Activity_EXPIRED Activity_Status = 3 // 活动已结束（时间过期）
	Activity_STOP    Activity_Status = 4 // 活动停止（运营平台手动停止）
	Activity_SUSPEND Activity_Status = 5 // 活动暂停（运营平台手动暂停）
)

// Enum value maps for Activity_Status.
var (
	Activity_Status_name = map[int32]string{
		0: "DRAFT",
		1: "READY",
		2: "RUNNING",
		3: "EXPIRED",
		4: "STOP",
		5: "SUSPEND",
	}
	Activity_Status_value = map[string]int32{
		"DRAFT":   0,
		"READY":   1,
		"RUNNING": 2,
		"EXPIRED": 3,
		"STOP":    4,
		"SUSPEND": 5,
	}
)

func (x Activity_Status) Enum() *Activity_Status {
	p := new(Activity_Status)
	*p = x
	return p
}

func (x Activity_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Activity_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_common_meta_proto_enumTypes[6].Descriptor()
}

func (Activity_Status) Type() protoreflect.EnumType {
	return &file_common_meta_proto_enumTypes[6]
}

func (x Activity_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Activity_Status.Descriptor instead.
func (Activity_Status) EnumDescriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{17, 0}
}

type Activity_CreateType int32

const (
	Activity_PLATFORM Activity_CreateType = 0 // 运营平台发起
	Activity_MOBILE   Activity_CreateType = 1 // 移动端发起
)

// Enum value maps for Activity_CreateType.
var (
	Activity_CreateType_name = map[int32]string{
		0: "PLATFORM",
		1: "MOBILE",
	}
	Activity_CreateType_value = map[string]int32{
		"PLATFORM": 0,
		"MOBILE":   1,
	}
)

func (x Activity_CreateType) Enum() *Activity_CreateType {
	p := new(Activity_CreateType)
	*p = x
	return p
}

func (x Activity_CreateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Activity_CreateType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_meta_proto_enumTypes[7].Descriptor()
}

func (Activity_CreateType) Type() protoreflect.EnumType {
	return &file_common_meta_proto_enumTypes[7]
}

func (x Activity_CreateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Activity_CreateType.Descriptor instead.
func (Activity_CreateType) EnumDescriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{17, 1}
}

type Activity_WhiteType int32

const (
	Activity_None      Activity_WhiteType = 0 // 什么都不需要
	Activity_WhiteList Activity_WhiteType = 1 // 需要白名单
)

// Enum value maps for Activity_WhiteType.
var (
	Activity_WhiteType_name = map[int32]string{
		0: "None",
		1: "WhiteList",
	}
	Activity_WhiteType_value = map[string]int32{
		"None":      0,
		"WhiteList": 1,
	}
)

func (x Activity_WhiteType) Enum() *Activity_WhiteType {
	p := new(Activity_WhiteType)
	*p = x
	return p
}

func (x Activity_WhiteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Activity_WhiteType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_meta_proto_enumTypes[8].Descriptor()
}

func (Activity_WhiteType) Type() protoreflect.EnumType {
	return &file_common_meta_proto_enumTypes[8]
}

func (x Activity_WhiteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Activity_WhiteType.Descriptor instead.
func (Activity_WhiteType) EnumDescriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{17, 2}
}

type Team_TeamFlag int32

const (
	Team_USER_TEAM Team_TeamFlag = 0 // 用户创建的小队
	Team_SYS_TEAM  Team_TeamFlag = 1 // 运营平台创建的系统默认小队
)

// Enum value maps for Team_TeamFlag.
var (
	Team_TeamFlag_name = map[int32]string{
		0: "USER_TEAM",
		1: "SYS_TEAM",
	}
	Team_TeamFlag_value = map[string]int32{
		"USER_TEAM": 0,
		"SYS_TEAM":  1,
	}
)

func (x Team_TeamFlag) Enum() *Team_TeamFlag {
	p := new(Team_TeamFlag)
	*p = x
	return p
}

func (x Team_TeamFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Team_TeamFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_common_meta_proto_enumTypes[9].Descriptor()
}

func (Team_TeamFlag) Type() protoreflect.EnumType {
	return &file_common_meta_proto_enumTypes[9]
}

func (x Team_TeamFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Team_TeamFlag.Descriptor instead.
func (Team_TeamFlag) EnumDescriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{18, 0}
}

type UserPKInteract_InteractType int32

const (
	UserPKInteract_NO_INTERACT UserPKInteract_InteractType = 0
	UserPKInteract_THUMB       UserPKInteract_InteractType = 1
	UserPKInteract_SMILE       UserPKInteract_InteractType = 2
	UserPKInteract_BOMB        UserPKInteract_InteractType = 3
)

// Enum value maps for UserPKInteract_InteractType.
var (
	UserPKInteract_InteractType_name = map[int32]string{
		0: "NO_INTERACT",
		1: "THUMB",
		2: "SMILE",
		3: "BOMB",
	}
	UserPKInteract_InteractType_value = map[string]int32{
		"NO_INTERACT": 0,
		"THUMB":       1,
		"SMILE":       2,
		"BOMB":        3,
	}
)

func (x UserPKInteract_InteractType) Enum() *UserPKInteract_InteractType {
	p := new(UserPKInteract_InteractType)
	*p = x
	return p
}

func (x UserPKInteract_InteractType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserPKInteract_InteractType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_meta_proto_enumTypes[10].Descriptor()
}

func (UserPKInteract_InteractType) Type() protoreflect.EnumType {
	return &file_common_meta_proto_enumTypes[10]
}

func (x UserPKInteract_InteractType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserPKInteract_InteractType.Descriptor instead.
func (UserPKInteract_InteractType) EnumDescriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{31, 0}
}

type UserPKInteract_InteractOps int32

const (
	UserPKInteract_NO_OPS UserPKInteract_InteractOps = 0
	UserPKInteract_PLUS   UserPKInteract_InteractOps = 1
	UserPKInteract_MINUS  UserPKInteract_InteractOps = 2
)

// Enum value maps for UserPKInteract_InteractOps.
var (
	UserPKInteract_InteractOps_name = map[int32]string{
		0: "NO_OPS",
		1: "PLUS",
		2: "MINUS",
	}
	UserPKInteract_InteractOps_value = map[string]int32{
		"NO_OPS": 0,
		"PLUS":   1,
		"MINUS":  2,
	}
)

func (x UserPKInteract_InteractOps) Enum() *UserPKInteract_InteractOps {
	p := new(UserPKInteract_InteractOps)
	*p = x
	return p
}

func (x UserPKInteract_InteractOps) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserPKInteract_InteractOps) Descriptor() protoreflect.EnumDescriptor {
	return file_common_meta_proto_enumTypes[11].Descriptor()
}

func (UserPKInteract_InteractOps) Type() protoreflect.EnumType {
	return &file_common_meta_proto_enumTypes[11]
}

func (x UserPKInteract_InteractOps) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserPKInteract_InteractOps.Descriptor instead.
func (UserPKInteract_InteractOps) EnumDescriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{31, 1}
}

type CommonHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg    string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Code   int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	OpTime int64  `protobuf:"varint,3,opt,name=op_time,json=opTime,proto3" json:"op_time,omitempty"`
}

func (x *CommonHeader) Reset() {
	*x = CommonHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonHeader) ProtoMessage() {}

func (x *CommonHeader) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonHeader.ProtoReflect.Descriptor instead.
func (*CommonHeader) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{0}
}

func (x *CommonHeader) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CommonHeader) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CommonHeader) GetOpTime() int64 {
	if x != nil {
		return x.OpTime
	}
	return 0
}

type MatchRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Funds        int32              `protobuf:"varint,1,opt,name=funds,proto3" json:"funds,omitempty"`                            // match funds today, if have not match is 0
	Steps        int32              `protobuf:"varint,2,opt,name=steps,proto3" json:"steps,omitempty"`                            // match step today, if have not match is 0
	Item         string             `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`                               // user match item
	Op           MatchRecord_OPType `protobuf:"varint,4,opt,name=op,proto3,enum=metadata.MatchRecord_OPType" json:"op,omitempty"` // user match op
	Date         string             `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`                               // 2006-01-02
	Combo        int32              `protobuf:"varint,6,opt,name=combo,proto3" json:"combo,omitempty"`
	Organization string             `protobuf:"bytes,7,opt,name=organization,proto3" json:"organization,omitempty"`
	Id           string             `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
	ActivityId   string             `protobuf:"bytes,9,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	TFunds       int32              `protobuf:"varint,10,opt,name=t_funds,json=tFunds,proto3" json:"t_funds,omitempty"`
	TSteps       int32              `protobuf:"varint,11,opt,name=t_steps,json=tSteps,proto3" json:"t_steps,omitempty"`
	TTimes       int32              `protobuf:"varint,12,opt,name=t_times,json=tTimes,proto3" json:"t_times,omitempty"`
	Coupons      []*LoveCoupons     `protobuf:"bytes,13,rep,name=coupons,proto3" json:"coupons,omitempty"`
}

func (x *MatchRecord) Reset() {
	*x = MatchRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRecord) ProtoMessage() {}

func (x *MatchRecord) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRecord.ProtoReflect.Descriptor instead.
func (*MatchRecord) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{1}
}

func (x *MatchRecord) GetFunds() int32 {
	if x != nil {
		return x.Funds
	}
	return 0
}

func (x *MatchRecord) GetSteps() int32 {
	if x != nil {
		return x.Steps
	}
	return 0
}

func (x *MatchRecord) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *MatchRecord) GetOp() MatchRecord_OPType {
	if x != nil {
		return x.Op
	}
	return MatchRecord_UNKNOWN
}

func (x *MatchRecord) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *MatchRecord) GetCombo() int32 {
	if x != nil {
		return x.Combo
	}
	return 0
}

func (x *MatchRecord) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *MatchRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MatchRecord) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *MatchRecord) GetTFunds() int32 {
	if x != nil {
		return x.TFunds
	}
	return 0
}

func (x *MatchRecord) GetTSteps() int32 {
	if x != nil {
		return x.TSteps
	}
	return 0
}

func (x *MatchRecord) GetTTimes() int32 {
	if x != nil {
		return x.TTimes
	}
	return 0
}

func (x *MatchRecord) GetCoupons() []*LoveCoupons {
	if x != nil {
		return x.Coupons
	}
	return nil
}

type LoveCoupons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32  `protobuf:"varint,1,opt,name=id,json=cp_id,proto3" json:"id,omitempty"`
	Type            int32  `protobuf:"varint,2,opt,name=type,json=cp_type,proto3" json:"type,omitempty"` // 1消费券， 2商家券
	Name            string `protobuf:"bytes,3,opt,name=name,json=cp_name,proto3" json:"name,omitempty"`
	StockType       string `protobuf:"bytes,4,opt,name=stock_type,json=cp_stock_type,proto3" json:"stock_type,omitempty"`                  // [代金券] - NORMAL：固定面额满减券批次 CUT_TO：减至券批次;  [商家券] NORMAL：固定面额满减券批次/ DISCOUNT：折扣券批次/ EXCHANGE：换购券批次
	Threshold       int32  `protobuf:"varint,5,opt,name=threshold,json=cp_cill,proto3" json:"threshold,omitempty"`                         // 批次类型为NORMAL、DISCOUNT、EXCHANGE：消费门槛（单位：分）/ 批次类型为CUT_TO：可用优惠的商品最高单价（单位：分）
	Reduction       int32  `protobuf:"varint,6,opt,name=reduction,json=cp_reduction,proto3" json:"reduction,omitempty"`                    // 批次类型为NORMAL：优惠金额（单位：分） / 批次类型为DISCOUNT：折扣百分比，例如：86为八六折。示例值：86 / 批次类型为EXCHANGE：单品换购价（单位：分）/ 批次类型为CUT_TO：减至后的优惠单价（单位：分）
	Scope           string `protobuf:"bytes,7,opt,name=scope,json=cp_scope,proto3" json:"scope,omitempty"`                                 // 可用范围
	AppId           string `protobuf:"bytes,8,opt,name=app_id,json=cp_app_id,proto3" json:"app_id,omitempty"`                              // 小程序ID
	AppletLink      string `protobuf:"bytes,9,opt,name=applet_link,json=cp_applet_link,proto3" json:"applet_link,omitempty"`               // 券使用的url（商城）
	AvailableStart  int32  `protobuf:"varint,10,opt,name=available_start,json=cp_available_start,proto3" json:"available_start,omitempty"` // 使用起始时间
	AvailableEnd    int32  `protobuf:"varint,11,opt,name=available_end,json=cp_available_end,proto3" json:"available_end,omitempty"`
	ReceiveStart    int32  `protobuf:"varint,12,opt,name=receive_start,json=cp_receive_start,proto3" json:"receive_start,omitempty"` // 领取起始时间
	ReceiveEnd      int32  `protobuf:"varint,13,opt,name=receive_end,json=cp_receive_end,proto3" json:"receive_end,omitempty"`
	MaxPerUser      int32  `protobuf:"varint,14,opt,name=max_per_user,json=cp_max_per_user,proto3" json:"max_per_user,omitempty"` // 用户领取总上限
	MaxNum          int32  `protobuf:"varint,15,opt,name=max_num,json=cp_max_num,proto3" json:"max_num,omitempty"`                // 制券数量
	Priority        int32  `protobuf:"varint,16,opt,name=priority,json=cp_sort,proto3" json:"priority,omitempty"`                 // 优先级
	EnterpriseId    int32  `protobuf:"varint,17,opt,name=enterprise_id,proto3" json:"enterprise_id,omitempty"`
	EnterpriseName  string `protobuf:"bytes,18,opt,name=enterprise_name,proto3" json:"enterprise_name,omitempty"`
	EnterpriseLogo  string `protobuf:"bytes,19,opt,name=enterprise_logo,proto3" json:"enterprise_logo,omitempty"`
	DonateThreshold int32  `protobuf:"varint,20,opt,name=donate_threshold,json=cp_donate_threshold,proto3" json:"donate_threshold,omitempty"` // 捐款门槛
	AppOriginalId   string `protobuf:"bytes,21,opt,name=app_original_id,json=cp_app_original_id,proto3" json:"app_original_id,omitempty"`     // 原始应用ID
	// status
	WxCouponId string `protobuf:"bytes,22,opt,name=wx_coupon_id,json=coupon_id,proto3" json:"wx_coupon_id,omitempty"`
	SendTime   int32  `protobuf:"varint,23,opt,name=send_time,proto3" json:"send_time,omitempty"`
	SendResult int32  `protobuf:"varint,24,opt,name=send_result,proto3" json:"send_result,omitempty"` // 0：发放爱心券到微信卡包失败（终态）;1：发放爱心券到微信卡包成功（终态）;2：发放中（非终态）;3：用户已领取过该爱心券（终态）
}

func (x *LoveCoupons) Reset() {
	*x = LoveCoupons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoveCoupons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoveCoupons) ProtoMessage() {}

func (x *LoveCoupons) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoveCoupons.ProtoReflect.Descriptor instead.
func (*LoveCoupons) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{2}
}

func (x *LoveCoupons) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LoveCoupons) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *LoveCoupons) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LoveCoupons) GetStockType() string {
	if x != nil {
		return x.StockType
	}
	return ""
}

func (x *LoveCoupons) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *LoveCoupons) GetReduction() int32 {
	if x != nil {
		return x.Reduction
	}
	return 0
}

func (x *LoveCoupons) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *LoveCoupons) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *LoveCoupons) GetAppletLink() string {
	if x != nil {
		return x.AppletLink
	}
	return ""
}

func (x *LoveCoupons) GetAvailableStart() int32 {
	if x != nil {
		return x.AvailableStart
	}
	return 0
}

func (x *LoveCoupons) GetAvailableEnd() int32 {
	if x != nil {
		return x.AvailableEnd
	}
	return 0
}

func (x *LoveCoupons) GetReceiveStart() int32 {
	if x != nil {
		return x.ReceiveStart
	}
	return 0
}

func (x *LoveCoupons) GetReceiveEnd() int32 {
	if x != nil {
		return x.ReceiveEnd
	}
	return 0
}

func (x *LoveCoupons) GetMaxPerUser() int32 {
	if x != nil {
		return x.MaxPerUser
	}
	return 0
}

func (x *LoveCoupons) GetMaxNum() int32 {
	if x != nil {
		return x.MaxNum
	}
	return 0
}

func (x *LoveCoupons) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *LoveCoupons) GetEnterpriseId() int32 {
	if x != nil {
		return x.EnterpriseId
	}
	return 0
}

func (x *LoveCoupons) GetEnterpriseName() string {
	if x != nil {
		return x.EnterpriseName
	}
	return ""
}

func (x *LoveCoupons) GetEnterpriseLogo() string {
	if x != nil {
		return x.EnterpriseLogo
	}
	return ""
}

func (x *LoveCoupons) GetDonateThreshold() int32 {
	if x != nil {
		return x.DonateThreshold
	}
	return 0
}

func (x *LoveCoupons) GetAppOriginalId() string {
	if x != nil {
		return x.AppOriginalId
	}
	return ""
}

func (x *LoveCoupons) GetWxCouponId() string {
	if x != nil {
		return x.WxCouponId
	}
	return ""
}

func (x *LoveCoupons) GetSendTime() int32 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *LoveCoupons) GetSendResult() int32 {
	if x != nil {
		return x.SendResult
	}
	return 0
}

type MatchStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Funds int64  `protobuf:"varint,1,opt,name=funds,proto3" json:"funds,omitempty"`
	Steps int64  `protobuf:"varint,2,opt,name=steps,proto3" json:"steps,omitempty"`
	Times int32  `protobuf:"varint,3,opt,name=times,proto3" json:"times,omitempty"`
	Days  int32  `protobuf:"varint,4,opt,name=days,proto3" json:"days,omitempty"`
	Date  string `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *MatchStatus) Reset() {
	*x = MatchStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchStatus) ProtoMessage() {}

func (x *MatchStatus) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchStatus.ProtoReflect.Descriptor instead.
func (*MatchStatus) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{3}
}

func (x *MatchStatus) GetFunds() int64 {
	if x != nil {
		return x.Funds
	}
	return 0
}

func (x *MatchStatus) GetSteps() int64 {
	if x != nil {
		return x.Steps
	}
	return 0
}

func (x *MatchStatus) GetTimes() int32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *MatchStatus) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *MatchStatus) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

// 项目信息
type ProjectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid       string `protobuf:"bytes,1,opt,name=pid,proto3" json:"pid,omitempty"`                              // 项目id
	Title     string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                          // 项目标题
	Img       string `protobuf:"bytes,3,opt,name=img,proto3" json:"img,omitempty"`                              // 项目图片
	ExtDonate string `protobuf:"bytes,4,opt,name=ext_donate,json=extDonate,proto3" json:"ext_donate,omitempty"` // 项目额外信息
}

func (x *ProjectInfo) Reset() {
	*x = ProjectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectInfo) ProtoMessage() {}

func (x *ProjectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectInfo.ProtoReflect.Descriptor instead.
func (*ProjectInfo) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{4}
}

func (x *ProjectInfo) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *ProjectInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ProjectInfo) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *ProjectInfo) GetExtDonate() string {
	if x != nil {
		return x.ExtDonate
	}
	return ""
}

// 企业信息
type CompanyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId   string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`       // 企业id
	CompanySn   string `protobuf:"bytes,2,opt,name=company_sn,json=companySn,proto3" json:"company_sn,omitempty"`       // 企业简称, short-name的简写
	CompanyFn   string `protobuf:"bytes,3,opt,name=company_fn,json=companyFn,proto3" json:"company_fn,omitempty"`       // 企业全称, full-name的简写
	CompanyLogo string `protobuf:"bytes,4,opt,name=company_logo,json=companyLogo,proto3" json:"company_logo,omitempty"` // 企业logo
}

func (x *CompanyInfo) Reset() {
	*x = CompanyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyInfo) ProtoMessage() {}

func (x *CompanyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyInfo.ProtoReflect.Descriptor instead.
func (*CompanyInfo) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{5}
}

func (x *CompanyInfo) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *CompanyInfo) GetCompanySn() string {
	if x != nil {
		return x.CompanySn
	}
	return ""
}

func (x *CompanyInfo) GetCompanyFn() string {
	if x != nil {
		return x.CompanyFn
	}
	return ""
}

func (x *CompanyInfo) GetCompanyLogo() string {
	if x != nil {
		return x.CompanyLogo
	}
	return ""
}

// 配捐防刷规则
type AntiBlack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime string `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   string `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Steps     int64  `protobuf:"varint,3,opt,name=steps,proto3" json:"steps,omitempty"`
	Money     int64  `protobuf:"varint,4,opt,name=money,proto3" json:"money,omitempty"`
}

func (x *AntiBlack) Reset() {
	*x = AntiBlack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntiBlack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntiBlack) ProtoMessage() {}

func (x *AntiBlack) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntiBlack.ProtoReflect.Descriptor instead.
func (*AntiBlack) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{6}
}

func (x *AntiBlack) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *AntiBlack) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *AntiBlack) GetSteps() int64 {
	if x != nil {
		return x.Steps
	}
	return 0
}

func (x *AntiBlack) GetMoney() int64 {
	if x != nil {
		return x.Money
	}
	return 0
}

// 配捐防刷规则集合
type AntiBlackRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AntiBlacks []*AntiBlack `protobuf:"bytes,1,rep,name=anti_blacks,json=antiBlacks,proto3" json:"anti_blacks,omitempty"`
}

func (x *AntiBlackRules) Reset() {
	*x = AntiBlackRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntiBlackRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntiBlackRules) ProtoMessage() {}

func (x *AntiBlackRules) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntiBlackRules.ProtoReflect.Descriptor instead.
func (*AntiBlackRules) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{7}
}

func (x *AntiBlackRules) GetAntiBlacks() []*AntiBlack {
	if x != nil {
		return x.AntiBlacks
	}
	return nil
}

// 剩余配捐规则
type RemainMatchRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntervalStart int64 `protobuf:"varint,1,opt,name=interval_start,json=intervalStart,proto3" json:"interval_start,omitempty"` // 剩余金额区间, 分 [0, 15) 半开区间
	IntervalEnd   int64 `protobuf:"varint,2,opt,name=interval_end,json=intervalEnd,proto3" json:"interval_end,omitempty"`       // 剩余金额区间, 分
	MatchStart    int64 `protobuf:"varint,3,opt,name=match_start,json=matchStart,proto3" json:"match_start,omitempty"`          // 配捐金额区间, 分 [0.1, 1] 闭区间
	MatchEnd      int64 `protobuf:"varint,4,opt,name=match_end,json=matchEnd,proto3" json:"match_end,omitempty"`                // 配捐金额区间, 分
}

func (x *RemainMatchRule) Reset() {
	*x = RemainMatchRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemainMatchRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemainMatchRule) ProtoMessage() {}

func (x *RemainMatchRule) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemainMatchRule.ProtoReflect.Descriptor instead.
func (*RemainMatchRule) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{8}
}

func (x *RemainMatchRule) GetIntervalStart() int64 {
	if x != nil {
		return x.IntervalStart
	}
	return 0
}

func (x *RemainMatchRule) GetIntervalEnd() int64 {
	if x != nil {
		return x.IntervalEnd
	}
	return 0
}

func (x *RemainMatchRule) GetMatchStart() int64 {
	if x != nil {
		return x.MatchStart
	}
	return 0
}

func (x *RemainMatchRule) GetMatchEnd() int64 {
	if x != nil {
		return x.MatchEnd
	}
	return 0
}

// 剩余配捐规则集合
type RemainMatchRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemainMatchRules []*RemainMatchRule `protobuf:"bytes,1,rep,name=remain_match_rules,json=remainMatchRules,proto3" json:"remain_match_rules,omitempty"`
}

func (x *RemainMatchRules) Reset() {
	*x = RemainMatchRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemainMatchRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemainMatchRules) ProtoMessage() {}

func (x *RemainMatchRules) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemainMatchRules.ProtoReflect.Descriptor instead.
func (*RemainMatchRules) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{9}
}

func (x *RemainMatchRules) GetRemainMatchRules() []*RemainMatchRule {
	if x != nil {
		return x.RemainMatchRules
	}
	return nil
}

// 配捐活动基础信息
type MatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FEventId    string          `protobuf:"bytes,1,opt,name=f_event_id,json=fEventId,proto3" json:"f_event_id,omitempty"`            // 配捐活动id
	FCompanyId  string          `protobuf:"bytes,2,opt,name=f_company_id,json=fCompanyId,proto3" json:"f_company_id,omitempty"`      // 企业id
	FPid        string          `protobuf:"bytes,3,opt,name=f_pid,json=fPid,proto3" json:"f_pid,omitempty"`                          // 项目id
	FRuleId     string          `protobuf:"bytes,4,opt,name=f_rule_id,json=fRuleId,proto3" json:"f_rule_id,omitempty"`               // 活动规则id
	FTargetFund int64           `protobuf:"varint,5,opt,name=f_target_fund,json=fTargetFund,proto3" json:"f_target_fund,omitempty"`  // 活动总的配捐目标金额, 单位分
	FMatchType  int32           `protobuf:"varint,6,opt,name=f_match_type,json=fMatchType,proto3" json:"f_match_type,omitempty"`     // 活动类型
	FStartTime  string          `protobuf:"bytes,7,opt,name=f_start_time,json=fStartTime,proto3" json:"f_start_time,omitempty"`      // 活动开始时间, 格式: "2006-01-02 15:04:05"
	FEndTime    string          `protobuf:"bytes,8,opt,name=f_end_time,json=fEndTime,proto3" json:"f_end_time,omitempty"`            // 活动结束时间, 格式: "2006-01-02 15:04:05"
	FStatus     int32           `protobuf:"varint,9,opt,name=f_status,json=fStatus,proto3" json:"f_status,omitempty"`                // 活动状态, 用 enum Status 表示
	FCreateTime string          `protobuf:"bytes,10,opt,name=f_create_time,json=fCreateTime,proto3" json:"f_create_time,omitempty"`  // db记录创建时间
	FModifyTime string          `protobuf:"bytes,11,opt,name=f_modify_time,json=fModifyTime,proto3" json:"f_modify_time,omitempty"`  // db记录修改时间
	FMatchMode  int32           `protobuf:"varint,12,opt,name=f_match_mode,json=fMatchMode,proto3" json:"f_match_mode,omitempty"`    // (待废弃, 用v2版本替代) 配捐模式 0表示平均配捐（小池子每日上限） 1表示累计配捐（大池子）
	FRemindFund int64           `protobuf:"varint,13,opt,name=f_remind_fund,json=fRemindFund,proto3" json:"f_remind_fund,omitempty"` // 配捐活动剩余金额消息提醒, 单位分
	FAntiBlack  *AntiBlackRules `protobuf:"bytes,14,opt,name=f_anti_black,json=fAntiBlack,proto3" json:"f_anti_black,omitempty"`     // 防刷规则
	// this use for calculate match money; 2 is no use for calculate, if 2 use 1 method to calculate
	FMatchModeV2 MatchInfo_MatchMode `protobuf:"varint,15,opt,name=f_match_mode_v2,json=fMatchModeV2,proto3,enum=metadata.MatchInfo_MatchMode" json:"f_match_mode_v2,omitempty"` // 配捐模式 0表示平均配捐（小池子每日上限） 1表示累计配捐（大池子） 2表示剩余配捐（根据剩余金额配捐）
	FCertificate string              `protobuf:"bytes,16,opt,name=f_certificate,json=fCertificate,proto3" json:"f_certificate,omitempty"`                                        // 捐赠凭证
	FLoveCoupon  bool                `protobuf:"varint,17,opt,name=f_love_coupon,json=fLoveCoupon,proto3" json:"f_love_coupon,omitempty"`
	FCouponPid   string              `protobuf:"bytes,18,opt,name=f_coupon_pid,json=fCouponPid,proto3" json:"f_coupon_pid,omitempty"` // only use for yqz match, not available in act match
}

func (x *MatchInfo) Reset() {
	*x = MatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchInfo) ProtoMessage() {}

func (x *MatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchInfo.ProtoReflect.Descriptor instead.
func (*MatchInfo) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{10}
}

func (x *MatchInfo) GetFEventId() string {
	if x != nil {
		return x.FEventId
	}
	return ""
}

func (x *MatchInfo) GetFCompanyId() string {
	if x != nil {
		return x.FCompanyId
	}
	return ""
}

func (x *MatchInfo) GetFPid() string {
	if x != nil {
		return x.FPid
	}
	return ""
}

func (x *MatchInfo) GetFRuleId() string {
	if x != nil {
		return x.FRuleId
	}
	return ""
}

func (x *MatchInfo) GetFTargetFund() int64 {
	if x != nil {
		return x.FTargetFund
	}
	return 0
}

func (x *MatchInfo) GetFMatchType() int32 {
	if x != nil {
		return x.FMatchType
	}
	return 0
}

func (x *MatchInfo) GetFStartTime() string {
	if x != nil {
		return x.FStartTime
	}
	return ""
}

func (x *MatchInfo) GetFEndTime() string {
	if x != nil {
		return x.FEndTime
	}
	return ""
}

func (x *MatchInfo) GetFStatus() int32 {
	if x != nil {
		return x.FStatus
	}
	return 0
}

func (x *MatchInfo) GetFCreateTime() string {
	if x != nil {
		return x.FCreateTime
	}
	return ""
}

func (x *MatchInfo) GetFModifyTime() string {
	if x != nil {
		return x.FModifyTime
	}
	return ""
}

func (x *MatchInfo) GetFMatchMode() int32 {
	if x != nil {
		return x.FMatchMode
	}
	return 0
}

func (x *MatchInfo) GetFRemindFund() int64 {
	if x != nil {
		return x.FRemindFund
	}
	return 0
}

func (x *MatchInfo) GetFAntiBlack() *AntiBlackRules {
	if x != nil {
		return x.FAntiBlack
	}
	return nil
}

func (x *MatchInfo) GetFMatchModeV2() MatchInfo_MatchMode {
	if x != nil {
		return x.FMatchModeV2
	}
	return MatchInfo_MODE_AVERAGE
}

func (x *MatchInfo) GetFCertificate() string {
	if x != nil {
		return x.FCertificate
	}
	return ""
}

func (x *MatchInfo) GetFLoveCoupon() bool {
	if x != nil {
		return x.FLoveCoupon
	}
	return false
}

func (x *MatchInfo) GetFCouponPid() string {
	if x != nil {
		return x.FCouponPid
	}
	return ""
}

// 配捐活动统计
type MatchStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Money  int64 `protobuf:"varint,1,opt,name=money,proto3" json:"money,omitempty"`   // 活动当前已配捐金额, 单位分
	Remain int64 `protobuf:"varint,2,opt,name=remain,proto3" json:"remain,omitempty"` // 活动今天剩余配捐金额, 前面未配完的金额会累计到今天, 单位分
	Cnt    int64 `protobuf:"varint,3,opt,name=cnt,proto3" json:"cnt,omitempty"`       // 活动当前已配捐人次
	Steps  int64 `protobuf:"varint,4,opt,name=steps,proto3" json:"steps,omitempty"`   // 活动当前已配捐步数
}

func (x *MatchStats) Reset() {
	*x = MatchStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchStats) ProtoMessage() {}

func (x *MatchStats) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchStats.ProtoReflect.Descriptor instead.
func (*MatchStats) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{11}
}

func (x *MatchStats) GetMoney() int64 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *MatchStats) GetRemain() int64 {
	if x != nil {
		return x.Remain
	}
	return 0
}

func (x *MatchStats) GetCnt() int64 {
	if x != nil {
		return x.Cnt
	}
	return 0
}

func (x *MatchStats) GetSteps() int64 {
	if x != nil {
		return x.Steps
	}
	return 0
}

// 配捐规则
type MatchRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleId           string             `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`                                         // 规则id
	RuleType         MatchRule_RuleType `protobuf:"varint,2,opt,name=rule_type,json=ruleType,proto3,enum=metadata.MatchRule_RuleType" json:"rule_type,omitempty"` // 规则类型
	Status           int32              `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`                                                      // 规则状态, 预留
	MatchQuota       int32              `protobuf:"varint,4,opt,name=match_quota,json=matchQuota,proto3" json:"match_quota,omitempty"`                            // 配捐最低捐步步数
	BuffComboRule    *BuffComboRule     `protobuf:"bytes,5,opt,name=buff_combo_rule,json=buffComboRule,proto3" json:"buff_combo_rule,omitempty"`                  // buff连续配捐
	BuffPercentRule  *BuffPercentRule   `protobuf:"bytes,6,opt,name=buff_percent_rule,json=buffPercentRule,proto3" json:"buff_percent_rule,omitempty"`            // buff百分比配捐
	RemainMatchRules *RemainMatchRules  `protobuf:"bytes,7,opt,name=remain_match_rules,json=remainMatchRules,proto3" json:"remain_match_rules,omitempty"`         // 剩余配捐规则
	StepRelativeRule *StepRelativeRule  `protobuf:"bytes,8,opt,name=step_relative_rule,json=stepRelativeRule,proto3" json:"step_relative_rule,omitempty"`         // step relative rule
}

func (x *MatchRule) Reset() {
	*x = MatchRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRule) ProtoMessage() {}

func (x *MatchRule) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRule.ProtoReflect.Descriptor instead.
func (*MatchRule) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{12}
}

func (x *MatchRule) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *MatchRule) GetRuleType() MatchRule_RuleType {
	if x != nil {
		return x.RuleType
	}
	return MatchRule_BUFF_COMBO
}

func (x *MatchRule) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MatchRule) GetMatchQuota() int32 {
	if x != nil {
		return x.MatchQuota
	}
	return 0
}

func (x *MatchRule) GetBuffComboRule() *BuffComboRule {
	if x != nil {
		return x.BuffComboRule
	}
	return nil
}

func (x *MatchRule) GetBuffPercentRule() *BuffPercentRule {
	if x != nil {
		return x.BuffPercentRule
	}
	return nil
}

func (x *MatchRule) GetRemainMatchRules() *RemainMatchRules {
	if x != nil {
		return x.RemainMatchRules
	}
	return nil
}

func (x *MatchRule) GetStepRelativeRule() *StepRelativeRule {
	if x != nil {
		return x.StepRelativeRule
	}
	return nil
}

// 配捐活动
type MatchActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchInfo  *MatchInfo   `protobuf:"bytes,1,opt,name=match_info,json=matchInfo,proto3" json:"match_info,omitempty"`    // 活动基础信息
	MatchRule  *MatchRule   `protobuf:"bytes,2,opt,name=match_rule,json=matchRule,proto3" json:"match_rule,omitempty"`    // 配捐规则
	MatchStats *MatchStats  `protobuf:"bytes,3,opt,name=match_stats,json=matchStats,proto3" json:"match_stats,omitempty"` // 活动统计
	Project    *ProjectInfo `protobuf:"bytes,4,opt,name=project,proto3" json:"project,omitempty"`                         // 项目信息
	Company    *CompanyInfo `protobuf:"bytes,5,opt,name=company,proto3" json:"company,omitempty"`                         // 企业信息
}

func (x *MatchActivity) Reset() {
	*x = MatchActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchActivity) ProtoMessage() {}

func (x *MatchActivity) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchActivity.ProtoReflect.Descriptor instead.
func (*MatchActivity) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{13}
}

func (x *MatchActivity) GetMatchInfo() *MatchInfo {
	if x != nil {
		return x.MatchInfo
	}
	return nil
}

func (x *MatchActivity) GetMatchRule() *MatchRule {
	if x != nil {
		return x.MatchRule
	}
	return nil
}

func (x *MatchActivity) GetMatchStats() *MatchStats {
	if x != nil {
		return x.MatchStats
	}
	return nil
}

func (x *MatchActivity) GetProject() *ProjectInfo {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *MatchActivity) GetCompany() *CompanyInfo {
	if x != nil {
		return x.Company
	}
	return nil
}

// Buff基本规则
type BuffMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicFund int32 `protobuf:"varint,1,opt,name=basic_fund,json=basicFund,proto3" json:"basic_fund,omitempty"` // 基础配捐平均金额（分）
	BasicWave int32 `protobuf:"varint,2,opt,name=basic_wave,json=basicWave,proto3" json:"basic_wave,omitempty"` // 基础配捐波动值（分）
	BuffFund  int32 `protobuf:"varint,3,opt,name=buff_fund,json=buffFund,proto3" json:"buff_fund,omitempty"`    // BUFF配捐平均金额（分）
	BuffWave  int32 `protobuf:"varint,4,opt,name=buff_wave,json=buffWave,proto3" json:"buff_wave,omitempty"`    // BUFF配捐波动值（分）
}

func (x *BuffMeta) Reset() {
	*x = BuffMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuffMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffMeta) ProtoMessage() {}

func (x *BuffMeta) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffMeta.ProtoReflect.Descriptor instead.
func (*BuffMeta) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{14}
}

func (x *BuffMeta) GetBasicFund() int32 {
	if x != nil {
		return x.BasicFund
	}
	return 0
}

func (x *BuffMeta) GetBasicWave() int32 {
	if x != nil {
		return x.BasicWave
	}
	return 0
}

func (x *BuffMeta) GetBuffFund() int32 {
	if x != nil {
		return x.BuffFund
	}
	return 0
}

func (x *BuffMeta) GetBuffWave() int32 {
	if x != nil {
		return x.BuffWave
	}
	return 0
}

// BUFF连续配捐规则
type BuffComboRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffMeta      *BuffMeta `protobuf:"bytes,1,opt,name=buff_meta,json=buffMeta,proto3" json:"buff_meta,omitempty"`                 // buff配捐基本规则
	BuffThreshold int32     `protobuf:"varint,2,opt,name=buff_threshold,json=buffThreshold,proto3" json:"buff_threshold,omitempty"` // 触发buff的连续配捐次数
}

func (x *BuffComboRule) Reset() {
	*x = BuffComboRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuffComboRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffComboRule) ProtoMessage() {}

func (x *BuffComboRule) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffComboRule.ProtoReflect.Descriptor instead.
func (*BuffComboRule) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{15}
}

func (x *BuffComboRule) GetBuffMeta() *BuffMeta {
	if x != nil {
		return x.BuffMeta
	}
	return nil
}

func (x *BuffComboRule) GetBuffThreshold() int32 {
	if x != nil {
		return x.BuffThreshold
	}
	return 0
}

// BUFF百分比配捐规则
type BuffPercentRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffMeta    *BuffMeta `protobuf:"bytes,1,opt,name=buff_meta,json=buffMeta,proto3" json:"buff_meta,omitempty"`           // buff配捐基本规则
	BuffPercent int32     `protobuf:"varint,2,opt,name=buff_percent,json=buffPercent,proto3" json:"buff_percent,omitempty"` // buff配捐百分比
}

func (x *BuffPercentRule) Reset() {
	*x = BuffPercentRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuffPercentRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffPercentRule) ProtoMessage() {}

func (x *BuffPercentRule) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffPercentRule.ProtoReflect.Descriptor instead.
func (*BuffPercentRule) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{16}
}

func (x *BuffPercentRule) GetBuffMeta() *BuffMeta {
	if x != nil {
		return x.BuffMeta
	}
	return nil
}

func (x *BuffPercentRule) GetBuffPercent() int32 {
	if x != nil {
		return x.BuffPercent
	}
	return 0
}

// 定制型活动基础配置
type Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId      string              `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`                                 // 活动id
	MatchId         string              `protobuf:"bytes,2,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`                                          // 配捐活动id
	ActivityCreator string              `protobuf:"bytes,3,opt,name=activity_creator,json=activityCreator,proto3" json:"activity_creator,omitempty"`                  // 活动创建者id
	Type            Activity_CreateType `protobuf:"varint,4,opt,name=type,proto3,enum=metadata.Activity_CreateType" json:"type,omitempty"`                            // 活动发起类型(运营平台或手机端发起)
	Desc            string              `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`                                                               // 活动描述（活动名称）
	Slogan          string              `protobuf:"bytes,6,opt,name=slogan,proto3" json:"slogan,omitempty"`                                                           // 活动口号
	RouteId         string              `protobuf:"bytes,7,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`                                          // 地图id
	Bgpic           string              `protobuf:"bytes,8,opt,name=bgpic,proto3" json:"bgpic,omitempty"`                                                             // 活动自定义主题图片
	BgpicStatus     int32               `protobuf:"varint,9,opt,name=bgpic_status,json=bgpicStatus,proto3" json:"bgpic_status,omitempty"`                             // 自定义图片审核状态
	StartTime       string              `protobuf:"bytes,10,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                   // 活动开始时间
	EndTime         string              `protobuf:"bytes,11,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                         // 活动结束时间
	TeamMode        int32               `protobuf:"varint,12,opt,name=team_mode,json=teamMode,proto3" json:"team_mode,omitempty"`                                     // 小队模式 0：活动有小队用户不必须加入队伍 1：活动有小队并且用户必须加入小队 2：活动无小队
	TeamOff         int32               `protobuf:"varint,13,opt,name=team_off,json=teamOff,proto3" json:"team_off,omitempty"`                                        // 是否开放组队 0表示开放组队, 1表示关闭组队
	TeamMemberLimit int32               `protobuf:"varint,14,opt,name=team_member_limit,json=teamMemberLimit,proto3" json:"team_member_limit,omitempty"`              // 小队人数上限
	Status          Activity_Status     `protobuf:"varint,15,opt,name=status,proto3,enum=metadata.Activity_Status" json:"status,omitempty"`                           // 活动状态 0：未审核(手机端发起支付成功才审核通过)  1：活动未开始  2：活动进行中  3：活动已结束（时间过期） 4：活动停止（运营平台手动停止）
	DefaultTeams    []string            `protobuf:"bytes,16,rep,name=default_teams,json=defaultTeams,proto3" json:"default_teams,omitempty"`                          // 默认小队名称列表
	OrgName         string              `protobuf:"bytes,17,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`                                         // 团队/企业名称, 适用于移动端发起, 区别企业名称, 企业名称通过配捐信息查询
	OrgHead         string              `protobuf:"bytes,18,opt,name=org_head,json=orgHead,proto3" json:"org_head,omitempty"`                                         // 团队/企业头像, 适用于移动端发起, 区别企业logo, 企业logo通过配捐信息查询
	ShowSponsor     int32               `protobuf:"varint,19,opt,name=show_sponsor,json=showSponsor,proto3" json:"show_sponsor,omitempty"`                            // 是否展示发起人信息（适用于移动端发起）, 0表示不展示发起人信息, 1表示展示发起人信息
	MatchOff        int32               `protobuf:"varint,20,opt,name=match_off,json=matchOff,proto3" json:"match_off,omitempty"`                                     // 是否支持配捐 0表示支持配捐, 1表示不支持配捐, 默认活动支持配捐
	Rule            string              `protobuf:"bytes,21,opt,name=rule,proto3" json:"rule,omitempty"`                                                              // 活动规则（pc端发起的活动，可以直接配置）
	Color           string              `protobuf:"bytes,22,opt,name=color,proto3" json:"color,omitempty"`                                                            // 活动主色
	CompanyId       string              `protobuf:"bytes,23,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`                                   // 活动创建企业id(运营平台)
	SuppCoupons     bool                `protobuf:"varint,24,opt,name=supp_coupons,json=suppCoupons,proto3" json:"supp_coupons,omitempty"`                            // 是否支持爱心券
	WhiteType       Activity_WhiteType  `protobuf:"varint,25,opt,name=white_type,json=whiteType,proto3,enum=metadata.Activity_WhiteType" json:"white_type,omitempty"` // 白名单类型，0表示不需要，1表示要白名单
	CreateTime      string              `protobuf:"bytes,26,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                // 创建时间
	Cover           string              `protobuf:"bytes,27,opt,name=cover,proto3" json:"cover,omitempty"`                                                            // 活动封面图片地址
	RelationDesc    string              `protobuf:"bytes,28,opt,name=relation_desc,json=relationDesc,proto3" json:"relation_desc,omitempty"`                          // 活动关联描述(把一些活动关联起来)
	ForwardPic      string              `protobuf:"bytes,29,opt,name=forward_pic,json=forwardPic,proto3" json:"forward_pic,omitempty"`                                // 转发图片地址
}

func (x *Activity) Reset() {
	*x = Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{17}
}

func (x *Activity) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *Activity) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *Activity) GetActivityCreator() string {
	if x != nil {
		return x.ActivityCreator
	}
	return ""
}

func (x *Activity) GetType() Activity_CreateType {
	if x != nil {
		return x.Type
	}
	return Activity_PLATFORM
}

func (x *Activity) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Activity) GetSlogan() string {
	if x != nil {
		return x.Slogan
	}
	return ""
}

func (x *Activity) GetRouteId() string {
	if x != nil {
		return x.RouteId
	}
	return ""
}

func (x *Activity) GetBgpic() string {
	if x != nil {
		return x.Bgpic
	}
	return ""
}

func (x *Activity) GetBgpicStatus() int32 {
	if x != nil {
		return x.BgpicStatus
	}
	return 0
}

func (x *Activity) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *Activity) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *Activity) GetTeamMode() int32 {
	if x != nil {
		return x.TeamMode
	}
	return 0
}

func (x *Activity) GetTeamOff() int32 {
	if x != nil {
		return x.TeamOff
	}
	return 0
}

func (x *Activity) GetTeamMemberLimit() int32 {
	if x != nil {
		return x.TeamMemberLimit
	}
	return 0
}

func (x *Activity) GetStatus() Activity_Status {
	if x != nil {
		return x.Status
	}
	return Activity_DRAFT
}

func (x *Activity) GetDefaultTeams() []string {
	if x != nil {
		return x.DefaultTeams
	}
	return nil
}

func (x *Activity) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *Activity) GetOrgHead() string {
	if x != nil {
		return x.OrgHead
	}
	return ""
}

func (x *Activity) GetShowSponsor() int32 {
	if x != nil {
		return x.ShowSponsor
	}
	return 0
}

func (x *Activity) GetMatchOff() int32 {
	if x != nil {
		return x.MatchOff
	}
	return 0
}

func (x *Activity) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *Activity) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Activity) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *Activity) GetSuppCoupons() bool {
	if x != nil {
		return x.SuppCoupons
	}
	return false
}

func (x *Activity) GetWhiteType() Activity_WhiteType {
	if x != nil {
		return x.WhiteType
	}
	return Activity_None
}

func (x *Activity) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Activity) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *Activity) GetRelationDesc() string {
	if x != nil {
		return x.RelationDesc
	}
	return ""
}

func (x *Activity) GetForwardPic() string {
	if x != nil {
		return x.ForwardPic
	}
	return ""
}

// 小队基础配置
type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId     string        `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`                        // 活动id
	TeamId         string        `protobuf:"bytes,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`                                    // 小队id
	TeamType       int32         `protobuf:"varint,3,opt,name=team_type,json=teamType,proto3" json:"team_type,omitempty"`                             // 小队类型, 默认小队/私密小队
	TeamDesc       string        `protobuf:"bytes,4,opt,name=team_desc,json=teamDesc,proto3" json:"team_desc,omitempty"`                              // 小队名称
	TeamCreator    string        `protobuf:"bytes,5,opt,name=team_creator,json=teamCreator,proto3" json:"team_creator,omitempty"`                     // 小队创建者
	TeamLeader     string        `protobuf:"bytes,6,opt,name=team_leader,json=teamLeader,proto3" json:"team_leader,omitempty"`                        // 小队队长
	Status         int32         `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`                                                 // 小队状态, 1 正常 2 解散(系统默认小队不能解散)
	TeamFlag       Team_TeamFlag `protobuf:"varint,8,opt,name=team_flag,json=teamFlag,proto3,enum=metadata.Team_TeamFlag" json:"team_flag,omitempty"` // 小队标签, 区分用户创建和系统创建的小队
	TeamLeaderRank int32         `protobuf:"varint,9,opt,name=team_leader_rank,json=teamLeaderRank,proto3" json:"team_leader_rank,omitempty"`         // 队长在小队的排名
	TeamFunds      int64         `protobuf:"varint,10,opt,name=team_funds,json=teamFunds,proto3" json:"team_funds,omitempty"`                         // 小队公益金
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{18}
}

func (x *Team) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *Team) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *Team) GetTeamType() int32 {
	if x != nil {
		return x.TeamType
	}
	return 0
}

func (x *Team) GetTeamDesc() string {
	if x != nil {
		return x.TeamDesc
	}
	return ""
}

func (x *Team) GetTeamCreator() string {
	if x != nil {
		return x.TeamCreator
	}
	return ""
}

func (x *Team) GetTeamLeader() string {
	if x != nil {
		return x.TeamLeader
	}
	return ""
}

func (x *Team) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Team) GetTeamFlag() Team_TeamFlag {
	if x != nil {
		return x.TeamFlag
	}
	return Team_USER_TEAM
}

func (x *Team) GetTeamLeaderRank() int32 {
	if x != nil {
		return x.TeamLeaderRank
	}
	return 0
}

func (x *Team) GetTeamFunds() int64 {
	if x != nil {
		return x.TeamFunds
	}
	return 0
}

// 定制型活动
type CustomizedActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity      `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"` // 活动基础配置
	Match    *MatchActivity `protobuf:"bytes,2,opt,name=match,proto3" json:"match,omitempty"`       // 活动配捐功能配置
}

func (x *CustomizedActivity) Reset() {
	*x = CustomizedActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomizedActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomizedActivity) ProtoMessage() {}

func (x *CustomizedActivity) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomizedActivity.ProtoReflect.Descriptor instead.
func (*CustomizedActivity) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{19}
}

func (x *CustomizedActivity) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *CustomizedActivity) GetMatch() *MatchActivity {
	if x != nil {
		return x.Match
	}
	return nil
}

// user step data
type UserSteps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid   string           `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`                                                                                              // user id
	Steps map[string]int32 `protobuf:"bytes,2,rep,name=steps,proto3" json:"steps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // date - step
}

func (x *UserSteps) Reset() {
	*x = UserSteps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSteps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSteps) ProtoMessage() {}

func (x *UserSteps) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSteps.ProtoReflect.Descriptor instead.
func (*UserSteps) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{20}
}

func (x *UserSteps) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *UserSteps) GetSteps() map[string]int32 {
	if x != nil {
		return x.Steps
	}
	return nil
}

// 定制型活动成员
type ActivityMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId string `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"` // 活动id
	UserId     string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             // 用户id
	Status     int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`                          // 0 表示加入活动(兼容以前的数据)，1 表示退出活动
	CreateTime string `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` // 创建时间
	ArriveTime string `protobuf:"bytes,5,opt,name=arrive_time,json=arriveTime,proto3" json:"arrive_time,omitempty"` // 到达终点时间(默认是"")
}

func (x *ActivityMember) Reset() {
	*x = ActivityMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityMember) ProtoMessage() {}

func (x *ActivityMember) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityMember.ProtoReflect.Descriptor instead.
func (*ActivityMember) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{21}
}

func (x *ActivityMember) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *ActivityMember) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ActivityMember) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ActivityMember) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ActivityMember) GetArriveTime() string {
	if x != nil {
		return x.ArriveTime
	}
	return ""
}

// 定制型小队成员
type TeamMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId string `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"` // 活动id
	TeamId     string `protobuf:"bytes,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`             // 小队id
	UserId     string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             // 用户id
	InTeam     int32  `protobuf:"varint,4,opt,name=in_team,json=inTeam,proto3" json:"in_team,omitempty"`            // 1 表示未参与活动，2 表示参与活动
	Status     int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                          // 状态, 预留
	CreateTime string `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` // 创建时间
}

func (x *TeamMember) Reset() {
	*x = TeamMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamMember) ProtoMessage() {}

func (x *TeamMember) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamMember.ProtoReflect.Descriptor instead.
func (*TeamMember) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{22}
}

func (x *TeamMember) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *TeamMember) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *TeamMember) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TeamMember) GetInTeam() int32 {
	if x != nil {
		return x.InTeam
	}
	return 0
}

func (x *TeamMember) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TeamMember) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid  string `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Nick string `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	Head string `protobuf:"bytes,3,opt,name=head,proto3" json:"head,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{23}
}

func (x *UserInfo) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *UserInfo) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *UserInfo) GetHead() string {
	if x != nil {
		return x.Head
	}
	return ""
}

type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId   string      `protobuf:"bytes,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	Like        int32       `protobuf:"varint,2,opt,name=like,proto3" json:"like,omitempty"`
	Top         bool        `protobuf:"varint,30,opt,name=top,proto3" json:"top,omitempty"`
	TopTime     int64       `protobuf:"varint,31,opt,name=topTime,proto3" json:"topTime,omitempty"` // 置顶时间
	Pid         string      `protobuf:"bytes,4,opt,name=pid,proto3" json:"pid,omitempty"`           // 评论涉及的项目ID
	Title       string      `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	User        *UserInfo   `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	ToUser      *UserInfo   `protobuf:"bytes,7,opt,name=to_user,json=toUser,proto3" json:"to_user,omitempty"`
	Content     string      `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`
	CommentTime int64       `protobuf:"varint,9,opt,name=comment_time,json=commentTime,proto3" json:"comment_time,omitempty"`
	CommentType CommentType `protobuf:"varint,10,opt,name=comment_type,json=commentType,proto3,enum=metadata.CommentType" json:"comment_type,omitempty"` // 0 表示系统自动生成，1 表示用户主动评论
	ShowType    int32       `protobuf:"varint,11,opt,name=show_type,json=showType,proto3" json:"show_type,omitempty"`                                    // 0 代表不展示头像, 1 代表要展示头像
	ReplyCount  int32       `protobuf:"varint,12,opt,name=reply_count,json=replyCount,proto3" json:"reply_count,omitempty"`                              // 回复数量
	ReplyList   []*Comment  `protobuf:"bytes,13,rep,name=reply_list,json=replyList,proto3" json:"reply_list,omitempty"`
	TargetType  TargetType  `protobuf:"varint,14,opt,name=target_type,json=targetType,proto3,enum=metadata.TargetType" json:"target_type,omitempty"` // 0 表示yqz小队，1 评论的回复, 2 表示活动
	TargetId    string      `protobuf:"bytes,15,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`                                 // 对应如上
	ActivityId  string      `protobuf:"bytes,16,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`                           // 所属活动
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{24}
}

func (x *Comment) GetCommentId() string {
	if x != nil {
		return x.CommentId
	}
	return ""
}

func (x *Comment) GetLike() int32 {
	if x != nil {
		return x.Like
	}
	return 0
}

func (x *Comment) GetTop() bool {
	if x != nil {
		return x.Top
	}
	return false
}

func (x *Comment) GetTopTime() int64 {
	if x != nil {
		return x.TopTime
	}
	return 0
}

func (x *Comment) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *Comment) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Comment) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Comment) GetToUser() *UserInfo {
	if x != nil {
		return x.ToUser
	}
	return nil
}

func (x *Comment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Comment) GetCommentTime() int64 {
	if x != nil {
		return x.CommentTime
	}
	return 0
}

func (x *Comment) GetCommentType() CommentType {
	if x != nil {
		return x.CommentType
	}
	return CommentType_CommentType_SYSTEM
}

func (x *Comment) GetShowType() int32 {
	if x != nil {
		return x.ShowType
	}
	return 0
}

func (x *Comment) GetReplyCount() int32 {
	if x != nil {
		return x.ReplyCount
	}
	return 0
}

func (x *Comment) GetReplyList() []*Comment {
	if x != nil {
		return x.ReplyList
	}
	return nil
}

func (x *Comment) GetTargetType() TargetType {
	if x != nil {
		return x.TargetType
	}
	return TargetType_TargetType_YQZ
}

func (x *Comment) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *Comment) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

type Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyId   string    `protobuf:"bytes,1,opt,name=reply_id,json=replyId,proto3" json:"reply_id,omitempty"`
	Like      int32     `protobuf:"varint,2,opt,name=like,proto3" json:"like,omitempty"`
	User      *UserInfo `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Content   string    `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	ReplyTime int64     `protobuf:"varint,5,opt,name=reply_time,json=replyTime,proto3" json:"reply_time,omitempty"`
	ToUser    *UserInfo `protobuf:"bytes,6,opt,name=to_user,json=toUser,proto3" json:"to_user,omitempty"`
}

func (x *Reply) Reset() {
	*x = Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{25}
}

func (x *Reply) GetReplyId() string {
	if x != nil {
		return x.ReplyId
	}
	return ""
}

func (x *Reply) GetLike() int32 {
	if x != nil {
		return x.Like
	}
	return 0
}

func (x *Reply) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Reply) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Reply) GetReplyTime() int64 {
	if x != nil {
		return x.ReplyTime
	}
	return 0
}

func (x *Reply) GetToUser() *UserInfo {
	if x != nil {
		return x.ToUser
	}
	return nil
}

type UserRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid  string `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Rank int32  `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Fund int32  `protobuf:"varint,3,opt,name=fund,proto3" json:"fund,omitempty"`
}

func (x *UserRank) Reset() {
	*x = UserRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRank) ProtoMessage() {}

func (x *UserRank) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRank.ProtoReflect.Descriptor instead.
func (*UserRank) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{26}
}

func (x *UserRank) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *UserRank) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *UserRank) GetFund() int32 {
	if x != nil {
		return x.Fund
	}
	return 0
}

type CompanyRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pic   string `protobuf:"bytes,3,opt,name=pic,proto3" json:"pic,omitempty"`
	Fund  int64  `protobuf:"varint,4,opt,name=fund,proto3" json:"fund,omitempty"`
	Rank  int32  `protobuf:"varint,5,opt,name=rank,proto3" json:"rank,omitempty"`
	Times int64  `protobuf:"varint,6,opt,name=times,proto3" json:"times,omitempty"`
	Date  string `protobuf:"bytes,7,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *CompanyRank) Reset() {
	*x = CompanyRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyRank) ProtoMessage() {}

func (x *CompanyRank) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyRank.ProtoReflect.Descriptor instead.
func (*CompanyRank) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{27}
}

func (x *CompanyRank) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CompanyRank) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompanyRank) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *CompanyRank) GetFund() int64 {
	if x != nil {
		return x.Fund
	}
	return 0
}

func (x *CompanyRank) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *CompanyRank) GetTimes() int64 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *CompanyRank) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

// 步数相关配捐规则
type StepRelativeRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinSteps int32 `protobuf:"varint,1,opt,name=min_steps,json=minSteps,proto3" json:"min_steps,omitempty"`
	MaxSteps int32 `protobuf:"varint,2,opt,name=max_steps,json=maxSteps,proto3" json:"max_steps,omitempty"`
	MinMatch int32 `protobuf:"varint,3,opt,name=min_match,json=minMatch,proto3" json:"min_match,omitempty"`
	MaxMatch int32 `protobuf:"varint,4,opt,name=max_match,json=maxMatch,proto3" json:"max_match,omitempty"`
}

func (x *StepRelativeRule) Reset() {
	*x = StepRelativeRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepRelativeRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepRelativeRule) ProtoMessage() {}

func (x *StepRelativeRule) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepRelativeRule.ProtoReflect.Descriptor instead.
func (*StepRelativeRule) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{28}
}

func (x *StepRelativeRule) GetMinSteps() int32 {
	if x != nil {
		return x.MinSteps
	}
	return 0
}

func (x *StepRelativeRule) GetMaxSteps() int32 {
	if x != nil {
		return x.MaxSteps
	}
	return 0
}

func (x *StepRelativeRule) GetMinMatch() int32 {
	if x != nil {
		return x.MinMatch
	}
	return 0
}

func (x *StepRelativeRule) GetMaxMatch() int32 {
	if x != nil {
		return x.MaxMatch
	}
	return 0
}

// 定制型活动成员白名单
type ActivityWhiteList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId string `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"` // 活动id
	PhoneNum   string `protobuf:"bytes,2,opt,name=phone_num,json=phoneNum,proto3" json:"phone_num,omitempty"`       // 手机号码
	Status     int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`                          //
	CreateTime string `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` // 创建时间
}

func (x *ActivityWhiteList) Reset() {
	*x = ActivityWhiteList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityWhiteList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityWhiteList) ProtoMessage() {}

func (x *ActivityWhiteList) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityWhiteList.ProtoReflect.Descriptor instead.
func (*ActivityWhiteList) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{29}
}

func (x *ActivityWhiteList) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *ActivityWhiteList) GetPhoneNum() string {
	if x != nil {
		return x.PhoneNum
	}
	return ""
}

func (x *ActivityWhiteList) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ActivityWhiteList) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

// User pk profile
type UserPKProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thumb  int32  `protobuf:"varint,1,opt,name=thumb,proto3" json:"thumb,omitempty"`
	Smile  int32  `protobuf:"varint,2,opt,name=smile,proto3" json:"smile,omitempty"`
	Bomb   int32  `protobuf:"varint,3,opt,name=bomb,proto3" json:"bomb,omitempty"`
	UserId string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UserPKProfile) Reset() {
	*x = UserPKProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPKProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPKProfile) ProtoMessage() {}

func (x *UserPKProfile) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPKProfile.ProtoReflect.Descriptor instead.
func (*UserPKProfile) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{30}
}

func (x *UserPKProfile) GetThumb() int32 {
	if x != nil {
		return x.Thumb
	}
	return 0
}

func (x *UserPKProfile) GetSmile() int32 {
	if x != nil {
		return x.Smile
	}
	return 0
}

func (x *UserPKProfile) GetBomb() int32 {
	if x != nil {
		return x.Bomb
	}
	return 0
}

func (x *UserPKProfile) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// User pk interact
type UserPKInteract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string                      `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ToUserId string                      `protobuf:"bytes,2,opt,name=to_user_id,json=toUserId,proto3" json:"to_user_id,omitempty"`
	Interact UserPKInteract_InteractType `protobuf:"varint,3,opt,name=interact,proto3,enum=metadata.UserPKInteract_InteractType" json:"interact,omitempty"`
	Op       UserPKInteract_InteractOps  `protobuf:"varint,4,opt,name=op,proto3,enum=metadata.UserPKInteract_InteractOps" json:"op,omitempty"`
	Date     string                      `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *UserPKInteract) Reset() {
	*x = UserPKInteract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPKInteract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPKInteract) ProtoMessage() {}

func (x *UserPKInteract) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPKInteract.ProtoReflect.Descriptor instead.
func (*UserPKInteract) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{31}
}

func (x *UserPKInteract) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserPKInteract) GetToUserId() string {
	if x != nil {
		return x.ToUserId
	}
	return ""
}

func (x *UserPKInteract) GetInteract() UserPKInteract_InteractType {
	if x != nil {
		return x.Interact
	}
	return UserPKInteract_NO_INTERACT
}

func (x *UserPKInteract) GetOp() UserPKInteract_InteractOps {
	if x != nil {
		return x.Op
	}
	return UserPKInteract_NO_OPS
}

func (x *UserPKInteract) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

// User pk history
type UserPKHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thumb    int32  `protobuf:"varint,1,opt,name=thumb,proto3" json:"thumb,omitempty"`
	Smile    int32  `protobuf:"varint,2,opt,name=smile,proto3" json:"smile,omitempty"`
	Bomb     int32  `protobuf:"varint,3,opt,name=bomb,proto3" json:"bomb,omitempty"`
	UserId   string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ToUserId string `protobuf:"bytes,5,opt,name=to_user_id,json=toUserId,proto3" json:"to_user_id,omitempty"`
	Date     string `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *UserPKHistory) Reset() {
	*x = UserPKHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_meta_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPKHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPKHistory) ProtoMessage() {}

func (x *UserPKHistory) ProtoReflect() protoreflect.Message {
	mi := &file_common_meta_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPKHistory.ProtoReflect.Descriptor instead.
func (*UserPKHistory) Descriptor() ([]byte, []int) {
	return file_common_meta_proto_rawDescGZIP(), []int{32}
}

func (x *UserPKHistory) GetThumb() int32 {
	if x != nil {
		return x.Thumb
	}
	return 0
}

func (x *UserPKHistory) GetSmile() int32 {
	if x != nil {
		return x.Smile
	}
	return 0
}

func (x *UserPKHistory) GetBomb() int32 {
	if x != nil {
		return x.Bomb
	}
	return 0
}

func (x *UserPKHistory) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserPKHistory) GetToUserId() string {
	if x != nil {
		return x.ToUserId
	}
	return ""
}

func (x *UserPKHistory) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

var File_common_meta_proto protoreflect.FileDescriptor

var file_common_meta_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4d, 0x0a,
	0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa3, 0x03, 0x0a,
	0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x2c, 0x0a, 0x02,
	0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x4f, 0x50, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x6d, 0x62, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x5f, 0x66,
	0x75, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x46, 0x75, 0x6e,
	0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4c, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x73, 0x22, 0x2b, 0x0a, 0x06, 0x4f, 0x50, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x55, 0x46, 0x46,
	0x10, 0x02, 0x22, 0xc1, 0x06, 0x0a, 0x0b, 0x4c, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x73, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x70, 0x5f, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x70, 0x5f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x70, 0x5f, 0x63, 0x69,
	0x6c, 0x6c, 0x12, 0x1f, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x70, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x70,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x70,
	0x5f, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x2b, 0x0a, 0x0f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x70, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x63, 0x70, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x70, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x6e, 0x64,
	0x12, 0x25, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x70, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x70, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x6e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x70, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x6c, 0x6f,
	0x67, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x2d, 0x0a, 0x10, 0x64, 0x6f, 0x6e,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x63, 0x70, 0x5f, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x63, 0x70, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0c, 0x77, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x77, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22,
	0x66, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x5f,
	0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x53, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x66, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x46, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4c, 0x6f, 0x67, 0x6f, 0x22, 0x71, 0x0a, 0x09, 0x41, 0x6e, 0x74, 0x69, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x65, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0x46, 0x0a, 0x0e, 0x41, 0x6e,
	0x74, 0x69, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0b,
	0x61, 0x6e, 0x74, 0x69, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x74,
	0x69, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x52, 0x0a, 0x61, 0x6e, 0x74, 0x69, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x45, 0x6e, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x64, 0x22, 0x5b,
	0x0a, 0x10, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x47, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x9b, 0x06, 0x0a, 0x09,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x0a, 0x66, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x5f, 0x70,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x50, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x09, 0x66, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x66, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x66, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0c, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x66, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x66,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x66, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e,
	0x64, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x52,
	0x65, 0x6d, 0x69, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x66, 0x5f, 0x61,
	0x6e, 0x74, 0x69, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x74, 0x69, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x0a, 0x66, 0x41, 0x6e, 0x74, 0x69,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x44, 0x0a, 0x0f, 0x66, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x66,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x32, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x66, 0x5f, 0x6c, 0x6f, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x4c, 0x6f, 0x76, 0x65, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x5f, 0x70, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x50, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x50,
	0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x22, 0x3e, 0x0a, 0x09, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41,
	0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x52, 0x45, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x02, 0x22, 0x62, 0x0a, 0x0a, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x63, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x22, 0x81, 0x04,
	0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0f, 0x62, 0x75, 0x66, 0x66,
	0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x42, 0x75, 0x66,
	0x66, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x62, 0x75, 0x66, 0x66,
	0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x62, 0x75, 0x66,
	0x66, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x42, 0x75, 0x66, 0x66, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x0f, 0x62, 0x75, 0x66, 0x66, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x48, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x73, 0x74,
	0x65, 0x70, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x10, 0x73, 0x74, 0x65, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x22, 0x4b, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x4f, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x03, 0x22, 0x90, 0x02, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x22, 0x82, 0x01, 0x0a, 0x08, 0x42, 0x75, 0x66, 0x66, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x46, 0x75, 0x6e, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x77, 0x61, 0x76, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x57, 0x61, 0x76, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x75, 0x66, 0x66, 0x5f, 0x77, 0x61, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x62, 0x75, 0x66, 0x66, 0x57, 0x61, 0x76, 0x65, 0x22, 0x67, 0x0a, 0x0d, 0x42, 0x75, 0x66,
	0x66, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x62, 0x75,
	0x66, 0x66, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x62,
	0x75, 0x66, 0x66, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x75, 0x66, 0x66, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x22, 0x65, 0x0a, 0x0f, 0x42, 0x75, 0x66, 0x66, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x62, 0x75,
	0x66, 0x66, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x75,
	0x66, 0x66, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0xd5, 0x08, 0x0a, 0x08, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x67, 0x61, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x67, 0x61, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x67, 0x70, 0x69, 0x63,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x67, 0x70, 0x69, 0x63, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x67, 0x70, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x67, 0x70, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x6f, 0x66, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x4f,
	0x66, 0x66, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74,
	0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x31,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x48, 0x65, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x66, 0x66, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x75, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x5f, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x75, 0x70,
	0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x69, 0x63,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x50,
	0x69, 0x63, 0x22, 0x4f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05,
	0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x54, 0x4f, 0x50, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e,
	0x44, 0x10, 0x05, 0x22, 0x26, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x24, 0x0a, 0x09, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x10,
	0x01, 0x22, 0xfe, 0x02, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x65, 0x61, 0x6d, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x22, 0x27, 0x0a, 0x08, 0x54, 0x65, 0x61,
	0x6d, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45,
	0x41, 0x4d, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x59, 0x53, 0x5f, 0x54, 0x45, 0x41, 0x4d,
	0x10, 0x01, 0x22, 0x73, 0x0a, 0x12, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x8d, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x1a, 0x38, 0x0a,
	0x0a, 0x53, 0x74, 0x65, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa4, 0x01, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb1,
	0x01, 0x0a, 0x0a, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x44, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x69, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x22, 0xc1, 0x04, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0xc4, 0x01, 0x0a,
	0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x6c, 0x69, 0x6b, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x22, 0x44, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x0b, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66,
	0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74,
	0x65, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x53, 0x74,
	0x65, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x65, 0x70, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x68, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x4b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x6d, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x6d, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6d, 0x62, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x62, 0x6f, 0x6d, 0x62, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xc5, 0x02, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x4b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x0a, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x4b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x12, 0x34,
	0x0a, 0x02, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x4b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x70, 0x73,
	0x52, 0x02, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x3f, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x48, 0x55,
	0x4d, 0x42, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4d, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4d, 0x42, 0x10, 0x03, 0x22, 0x2e, 0x0a, 0x0b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x70, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x5f, 0x4f,
	0x50, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x10, 0x02, 0x22, 0x9a, 0x01, 0x0a, 0x0d, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x4b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6d, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x6d, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6d, 0x62, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x6f, 0x6d, 0x62, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x2a, 0x3b, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x10, 0x01, 0x2a, 0x51, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x59, 0x51, 0x5a, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x10, 0x02, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x6f, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6e, 0x67, 0x79, 0x69,
	0x2f, 0x79, 0x71, 0x7a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_meta_proto_rawDescOnce sync.Once
	file_common_meta_proto_rawDescData = file_common_meta_proto_rawDesc
)

func file_common_meta_proto_rawDescGZIP() []byte {
	file_common_meta_proto_rawDescOnce.Do(func() {
		file_common_meta_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_meta_proto_rawDescData)
	})
	return file_common_meta_proto_rawDescData
}

var file_common_meta_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_common_meta_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_common_meta_proto_goTypes = []interface{}{
	(CommentType)(0),                 // 0: metadata.CommentType
	(TargetType)(0),                  // 1: metadata.TargetType
	(MatchRecord_OPType)(0),          // 2: metadata.MatchRecord.OPType
	(MatchInfo_Status)(0),            // 3: metadata.MatchInfo.Status
	(MatchInfo_MatchMode)(0),         // 4: metadata.MatchInfo.MatchMode
	(MatchRule_RuleType)(0),          // 5: metadata.MatchRule.RuleType
	(Activity_Status)(0),             // 6: metadata.Activity.Status
	(Activity_CreateType)(0),         // 7: metadata.Activity.CreateType
	(Activity_WhiteType)(0),          // 8: metadata.Activity.WhiteType
	(Team_TeamFlag)(0),               // 9: metadata.Team.TeamFlag
	(UserPKInteract_InteractType)(0), // 10: metadata.UserPKInteract.InteractType
	(UserPKInteract_InteractOps)(0),  // 11: metadata.UserPKInteract.InteractOps
	(*CommonHeader)(nil),             // 12: metadata.CommonHeader
	(*MatchRecord)(nil),              // 13: metadata.MatchRecord
	(*LoveCoupons)(nil),              // 14: metadata.LoveCoupons
	(*MatchStatus)(nil),              // 15: metadata.MatchStatus
	(*ProjectInfo)(nil),              // 16: metadata.ProjectInfo
	(*CompanyInfo)(nil),              // 17: metadata.CompanyInfo
	(*AntiBlack)(nil),                // 18: metadata.AntiBlack
	(*AntiBlackRules)(nil),           // 19: metadata.AntiBlackRules
	(*RemainMatchRule)(nil),          // 20: metadata.RemainMatchRule
	(*RemainMatchRules)(nil),         // 21: metadata.RemainMatchRules
	(*MatchInfo)(nil),                // 22: metadata.MatchInfo
	(*MatchStats)(nil),               // 23: metadata.MatchStats
	(*MatchRule)(nil),                // 24: metadata.MatchRule
	(*MatchActivity)(nil),            // 25: metadata.MatchActivity
	(*BuffMeta)(nil),                 // 26: metadata.BuffMeta
	(*BuffComboRule)(nil),            // 27: metadata.BuffComboRule
	(*BuffPercentRule)(nil),          // 28: metadata.BuffPercentRule
	(*Activity)(nil),                 // 29: metadata.Activity
	(*Team)(nil),                     // 30: metadata.Team
	(*CustomizedActivity)(nil),       // 31: metadata.CustomizedActivity
	(*UserSteps)(nil),                // 32: metadata.UserSteps
	(*ActivityMember)(nil),           // 33: metadata.ActivityMember
	(*TeamMember)(nil),               // 34: metadata.TeamMember
	(*UserInfo)(nil),                 // 35: metadata.UserInfo
	(*Comment)(nil),                  // 36: metadata.Comment
	(*Reply)(nil),                    // 37: metadata.Reply
	(*UserRank)(nil),                 // 38: metadata.UserRank
	(*CompanyRank)(nil),              // 39: metadata.CompanyRank
	(*StepRelativeRule)(nil),         // 40: metadata.StepRelativeRule
	(*ActivityWhiteList)(nil),        // 41: metadata.ActivityWhiteList
	(*UserPKProfile)(nil),            // 42: metadata.UserPKProfile
	(*UserPKInteract)(nil),           // 43: metadata.UserPKInteract
	(*UserPKHistory)(nil),            // 44: metadata.UserPKHistory
	nil,                              // 45: metadata.UserSteps.StepsEntry
}
var file_common_meta_proto_depIdxs = []int32{
	2,  // 0: metadata.MatchRecord.op:type_name -> metadata.MatchRecord.OPType
	14, // 1: metadata.MatchRecord.coupons:type_name -> metadata.LoveCoupons
	18, // 2: metadata.AntiBlackRules.anti_blacks:type_name -> metadata.AntiBlack
	20, // 3: metadata.RemainMatchRules.remain_match_rules:type_name -> metadata.RemainMatchRule
	19, // 4: metadata.MatchInfo.f_anti_black:type_name -> metadata.AntiBlackRules
	4,  // 5: metadata.MatchInfo.f_match_mode_v2:type_name -> metadata.MatchInfo.MatchMode
	5,  // 6: metadata.MatchRule.rule_type:type_name -> metadata.MatchRule.RuleType
	27, // 7: metadata.MatchRule.buff_combo_rule:type_name -> metadata.BuffComboRule
	28, // 8: metadata.MatchRule.buff_percent_rule:type_name -> metadata.BuffPercentRule
	21, // 9: metadata.MatchRule.remain_match_rules:type_name -> metadata.RemainMatchRules
	40, // 10: metadata.MatchRule.step_relative_rule:type_name -> metadata.StepRelativeRule
	22, // 11: metadata.MatchActivity.match_info:type_name -> metadata.MatchInfo
	24, // 12: metadata.MatchActivity.match_rule:type_name -> metadata.MatchRule
	23, // 13: metadata.MatchActivity.match_stats:type_name -> metadata.MatchStats
	16, // 14: metadata.MatchActivity.project:type_name -> metadata.ProjectInfo
	17, // 15: metadata.MatchActivity.company:type_name -> metadata.CompanyInfo
	26, // 16: metadata.BuffComboRule.buff_meta:type_name -> metadata.BuffMeta
	26, // 17: metadata.BuffPercentRule.buff_meta:type_name -> metadata.BuffMeta
	7,  // 18: metadata.Activity.type:type_name -> metadata.Activity.CreateType
	6,  // 19: metadata.Activity.status:type_name -> metadata.Activity.Status
	8,  // 20: metadata.Activity.white_type:type_name -> metadata.Activity.WhiteType
	9,  // 21: metadata.Team.team_flag:type_name -> metadata.Team.TeamFlag
	29, // 22: metadata.CustomizedActivity.activity:type_name -> metadata.Activity
	25, // 23: metadata.CustomizedActivity.match:type_name -> metadata.MatchActivity
	45, // 24: metadata.UserSteps.steps:type_name -> metadata.UserSteps.StepsEntry
	35, // 25: metadata.Comment.user:type_name -> metadata.UserInfo
	35, // 26: metadata.Comment.to_user:type_name -> metadata.UserInfo
	0,  // 27: metadata.Comment.comment_type:type_name -> metadata.CommentType
	36, // 28: metadata.Comment.reply_list:type_name -> metadata.Comment
	1,  // 29: metadata.Comment.target_type:type_name -> metadata.TargetType
	35, // 30: metadata.Reply.user:type_name -> metadata.UserInfo
	35, // 31: metadata.Reply.to_user:type_name -> metadata.UserInfo
	10, // 32: metadata.UserPKInteract.interact:type_name -> metadata.UserPKInteract.InteractType
	11, // 33: metadata.UserPKInteract.op:type_name -> metadata.UserPKInteract.InteractOps
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_common_meta_proto_init() }
func file_common_meta_proto_init() {
	if File_common_meta_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_meta_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoveCoupons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntiBlack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntiBlackRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemainMatchRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemainMatchRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuffMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuffComboRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuffPercentRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomizedActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSteps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepRelativeRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityWhiteList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPKProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPKInteract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_meta_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPKHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_meta_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_meta_proto_goTypes,
		DependencyIndexes: file_common_meta_proto_depIdxs,
		EnumInfos:         file_common_meta_proto_enumTypes,
		MessageInfos:      file_common_meta_proto_msgTypes,
	}.Build()
	File_common_meta_proto = out.File
	file_common_meta_proto_rawDesc = nil
	file_common_meta_proto_goTypes = nil
	file_common_meta_proto_depIdxs = nil
}
